[{"name": "programming_as_a_way_of_thinking", "tags": ["programming", "computer-science", "thinking"], "summary": "introduction to programming as a way of thinking that combines mathematics, engineering, and natural science approaches", "content": "the first goal of this book is to teach you how to program in python.\nbut learning to program means learning a new way to think, so the second goal of this book is to help you think like a computer scientist.\nthis way of thinking combines some of the best features of mathematics, engineering, and natural science.\nlike mathematicians, computer scientists use formal languages to denote ideas -- specifically computations.\nlike engineers, they design things, assembling components into systems and evaluating trade-offs among alternatives.\nlike scientists, they observe the behavior of complex systems, form hypotheses, and test predictions.\n\nwe will start with the most basic elements of programming and work our way up.\nin this chapter, we'll see how python represents numbers, letters, and words.\nand you'll learn to perform arithmetic operations.\n\nyou will also start to learn the vocabulary of programming, including terms like operator, expression, value, and type.\nthis vocabulary is important -- you will need it to understand the rest of the book, to communicate with other programmers, and to use and understand virtual assistants.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "arithmetic_operators", "tags": ["operators", "arithmetic", "python-basics"], "summary": "basic arithmetic operators in python including addition, subtraction, multiplication, division, and exponentiation", "content": "an **arithmetic operator** is a symbol that represents an arithmetic computation.\n\n**basic operators:**\n- `+` - addition: `30 + 12` \u0432\u2020\u2019 42\n- `-` - subtraction: `43 - 1` \u0432\u2020\u2019 42\n- `*` - multiplication: `6 * 7` \u0432\u2020\u2019 42\n- `/` - division: `84 / 2` \u0432\u2020\u2019 42.0\n- `//` - integer division: `84 // 2` \u0432\u2020\u2019 42, `85 // 2` \u0432\u2020\u2019 42\n- `**` - exponentiation: `7 ** 2` \u0432\u2020\u2019 49\n\n**important notes:**\n- division (`/`) always returns a floating-point number\n- integer division (`//`) always rounds down\n- `^` is not exponentiation in python - it's the xor bitwise operator", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "expressions_and_values", "tags": ["expressions", "values", "order-of-operations"], "summary": "understanding expressions, values, and operator precedence in python", "content": "**expression:** a collection of operators and numbers.\n\n**value:** the result of evaluating an expression.\n\n**order of operations:**\n- exponentiation happens before multiplication and division\n- multiplication and division happen before addition and subtraction\n- parentheses can override the default order\n\n**examples:**\n- `6 + 6 ** 2` \u0432\u2020\u2019 42 (exponentiation first)\n- `12 + 5 * 6` \u0432\u2020\u2019 42 (multiplication before addition)\n- `(12 + 5) * 6` \u0432\u2020\u2019 102 (parentheses change order)", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "arithmetic_functions", "tags": ["functions", "built-in-functions", "rounding"], "summary": "built-in arithmetic functions in python including round() and abs()", "content": "python provides built-in functions for common arithmetic operations:\n\n**round()** - rounds a floating-point number to the nearest integer:\n- `round(42.4)` \u0432\u2020\u2019 42\n- `round(42.6)` \u0432\u2020\u2019 43\n\n**abs()** - computes the absolute value:\n- `abs(42)` \u0432\u2020\u2019 42\n- `abs(-42)` \u0432\u2020\u2019 42\n\n**function call syntax:**\n- parentheses are required when calling functions\n- `abs 42` would cause a syntaxerror\n- function names without parentheses refer to the function object itself", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "strings", "tags": ["strings", "text", "concatenation"], "summary": "working with strings in python - creation, concatenation, and basic operations", "content": "**strings** are sequences of characters used to represent text.\n\n**string creation:**\n- single quotes: `'hello'`\n- double quotes: `\"world\"`\n- double quotes are useful for strings containing apostrophes: `\"it's a small \"`\n\n**string operations:**\n- **concatenation**: `+` joins strings: `'well, ' + \"it's a small \" + 'world.'`\n- **repetition**: `*` repeats strings: `'spam, ' * 4` \u0432\u2020\u2019 `'spam, spam, spam, spam, '`\n- **length**: `len()` returns string length: `len('spam')` \u0432\u2020\u2019 4\n\n**important notes:**\n- only straight quotes are allowed (not backticks or smart quotes)\n- other arithmetic operators don't work with strings", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "values_and_types", "tags": ["types", "type-conversion", "python-types"], "summary": "understanding data types in python and type conversion between them", "content": "**basic data types:**\n- **int**: integers - `type(2)` \u0432\u2020\u2019 `<class 'int'>`\n- **float**: floating-point numbers - `type(42.0)` \u0432\u2020\u2019 `<class 'float'>`\n- **str**: strings - `type('hello')` \u0432\u2020\u2019 `<class 'str'>`\n\n**type conversion:**\n- `int()` converts to integer (rounds down): `int(42.9)` \u0432\u2020\u2019 42\n- `float()` converts to float: `float(42)` \u0432\u2020\u2019 42.0\n- `str()` converts to string\n\n**important distinctions:**\n- `'126'` is a string, not a number\n- strings containing digits must be converted before arithmetic: `int('126') / 3` \u0432\u2020\u2019 42.0\n- use underscores for large numbers: `1_000_000` not commas", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "formal_vs_natural_languages", "tags": ["programming-concepts", "languages", "theory"], "summary": "differences between formal programming languages and natural human languages", "content": "**natural languages:** languages people speak (english, spanish, french) that evolved naturally.\n\n**formal languages:** languages designed by people for specific applications (mathematics, programming).\n\n**key differences:**\n\n1. **ambiguity:**\n   - natural languages: full of ambiguity, resolved with context\n   - formal languages: nearly unambiguous, every program has exactly one meaning\n\n2. **redundancy:**\n   - natural languages: verbose with redundancy to reduce misunderstandings\n   - formal languages: concise with minimal redundancy\n\n3. **literalness:**\n   - natural languages: use idioms and metaphors\n   - formal languages: mean exactly what they say\n\nformal languages are more dense, structure is important, and details matter significantly.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging", "tags": ["debugging", "programming-practice", "problem-solving"], "summary": "introduction to debugging and managing emotions during programming", "content": "**bug:** a programming error.\n\n**debugging:** the process of finding and correcting errors.\n\n**emotional aspects:**\n- programming and debugging can bring out strong emotions (anger, sadness, embarrassment)\n- being prepared for these reactions helps manage them\n- view the computer as an employee with specific strengths (speed, precision) and weaknesses (no empathy, no big picture)\n\n**management approach:**\n- be a good manager: leverage strengths and mitigate weaknesses\n- use emotions to engage with problems without letting reactions interfere with work\n- debugging is a valuable skill applicable beyond programming", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "variables", "tags": ["programming", "python", "basics"], "summary": "variables are names that refer to values, created using assignment statements with the equals operator.", "content": "a **variable** is a name that refers to a value. to create a variable, we write an **assignment statement** like:\n\n```python\nn = 17\npi = 3.141592653589793\nmessage = 'and now for something completely different'\n```\n\nan assignment statement has three parts: the name of the variable on the left, the equals operator (`=`), and an expression on the right. when you run an assignment statement, there is no output. python creates the variable and gives it a value, but the assignment statement has no visible effect.\n\nafter creating a variable, you can use it as an expression, as part of an expression with arithmetic operators, or when calling a function.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "state_diagrams", "tags": ["programming", "python", "visualization"], "summary": "state diagrams are graphical representations showing variables and the values they refer to.", "content": "a common way to represent variables on paper is to write the name with an arrow pointing to its value. this kind of figure is called a **state diagram** because it shows what state each of the variables is in. we use state diagrams throughout the book to represent a model of how python stores variables and their values.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "variable_names", "tags": ["programming", "python", "syntax"], "summary": "variable names can contain letters, numbers, and underscores but cannot start with numbers or be python keywords.", "content": "variable names can be as long as you like. they can contain both letters and numbers, but they can't begin with a number. it is legal to use uppercase letters, but it is conventional to use only lower case for variable names.\n\nthe only punctuation that can appear in a variable name is the underscore character (`_`). it is often used in names with multiple words, such as `your_name` or `airspeed_of_unladen_swallow`.\n\nif you give a variable an illegal name, you get a syntax error. keywords are special words used to specify the structure of a program and can't be used as variable names. python has 36 keywords including `false`, `class`, `finally`, `is`, `return`, `none`, `continue`, `for`, `lambda`, `try`, `true`, `def`, `from`, `nonlocal`, `while`, `and`, `del`, `global`, `not`, `with`, `as`, `elif`, `if`, `or`, `yield`, `assert`, `else`, `import`, `pass`, `break`, `except`, `in`, `raise`.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "import_statement", "tags": ["programming", "python", "modules"], "summary": "the import statement is used to import modules containing variables and functions.", "content": "in order to use some python features, you have to **import** them. for example:\n\n```python\nimport math\n```\n\na **module** is a collection of variables and functions. the math module provides a variable called `pi` that contains the value of the mathematical constant denoted \u043f\u0452. to use a variable in a module, you have to use the **dot operator** (`.`) between the name of the module and the name of the variable.\n\nthe math module also contains functions like `sqrt` which computes square roots and `pow` which raises one number to the power of a second number.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "expressions_and_statements", "tags": ["programming", "python", "syntax"], "summary": "expressions compute values while statements perform actions but have no value.", "content": "an **expression** can be a single value (like an integer, floating-point number, or string), a collection of values and operators, or can include variable names and function calls.\n\na **statement** is a unit of code that has an effect, but no value. for example, an assignment statement creates a variable and gives it a value, but the statement itself has no value. similarly, an import statement has an effect - it imports a module so we can use the variables and functions it contains - but it has no visible effect.\n\ncomputing the value of an expression is called **evaluation**. running a statement is called **execution**.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "print_function", "tags": ["programming", "python", "output"], "summary": "the print function displays values and can take multiple arguments separated by commas.", "content": "when you evaluate an expression, the result is displayed, but if you evaluate more than one expression, only the value of the last one is displayed. to display more than one value, you can use the `print` function.\n\n```python\nprint(n+2)\nprint(n+3)\n```\n\nyou can also use a sequence of expressions separated by commas:\n\n```python\nprint('the value of pi is approximately', math.pi)\n```\n\nthe `print` function puts a space between the values.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "arguments", "tags": ["programming", "python", "functions"], "summary": "arguments are values provided to functions when called, with different functions accepting different numbers and types of arguments.", "content": "when you call a function, the expression in parenthesis is called an **argument**. some functions take only one argument (like `int`), some take two (like `math.pow`), and some can take additional arguments that are optional.\n\nfor example, `int` can take a second argument that specifies the base of the number:\n\n```python\nint('101', 2)  # returns 5\n```\n\n`round` also takes an optional second argument, which is the number of decimal places to round off to:\n\n```python\nround(math.pi, 3)  # returns 3.142\n```\n\nsome functions can take any number of arguments, like `print`. if you provide too many or too few arguments, or an argument with a type the function can't handle, python raises a `typeerror`.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "comments", "tags": ["programming", "python", "documentation"], "summary": "comments are notes in code that explain what the program is doing but have no effect on execution.", "content": "as programs get bigger and more complicated, they get more difficult to read. **comments** are notes added to programs to explain in natural language what the program is doing. they start with the `#` symbol.\n\ncomments can appear on a line by themselves or at the end of a line:\n\n```python\n# number of seconds in 42:42\nseconds = 42 * 60 + 42\n\nmiles = 10 / 1.61     # 10 kilometers in miles\n```\n\neverything from the `#` to the end of the line is ignored and has no effect on the execution of the program. comments are most useful when they document non-obvious features of the code or explain *why* the code does something rather than *what* it does.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging", "tags": ["programming", "python", "errors"], "summary": "three types of errors can occur in programs: syntax errors, runtime errors, and semantic errors.", "content": "three kinds of errors can occur in a program:\n\n* **syntax error**: refers to the structure of a program and the rules about that structure. if there is a syntax error anywhere in your program, python does not run the program and displays an error message immediately.\n\n* **runtime error**: if there are no syntax errors, the program can start running. but if something goes wrong, python displays an error message and stops. this type of error is also called an **exception** because it indicates that something exceptional has happened.\n\n* **semantic error**: related to meaning. if there is a semantic error, the program runs without generating error messages, but it does not do what you intended. identifying semantic errors can be tricky because it requires working backward by looking at the output.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "function_definition", "tags": ["programming", "python", "functions"], "summary": "function definitions specify the name of a new function and the sequence of statements that run when the function is called.", "content": "a **function definition** specifies the name of a new function and the sequence of statements that run when the function is called.\n\n```python\ndef print_lyrics():\n    print(\"i'm a lumberjack, and i'm okay.\")\n    print(\"i sleep all night and i work all day.\")\n```\n\n- `def` is a keyword that indicates this is a function definition\n- the name of the function is `print_lyrics`\n- the empty parentheses indicate this function doesn't take any arguments\n- the first line is called the **header** - the rest is called the **body**\n- the header must end with a colon and the body must be indented (conventionally 4 spaces)\n- defining a function creates a **function object**", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "function_parameters", "tags": ["programming", "python", "functions"], "summary": "parameters are variables in function definitions that receive values from arguments when the function is called.", "content": "functions can take parameters, which are variables that receive values when the function is called.\n\n```python\ndef print_twice(string):\n    print(string)\n    print(string)\n```\n\nthe variable name in parentheses is a **parameter**. when the function is called, the value of the argument is assigned to the parameter. you can use variables as arguments:\n\n```python\nline = 'dennis moore, '\nprint_twice(line)\n```\n\nin this example, the value of `line` gets assigned to the parameter `string`.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "function_calls_within_functions", "tags": ["programming", "python", "functions"], "summary": "functions can call other functions, allowing for modular program design and code reuse.", "content": "once you have defined a function, you can use it inside another function. this allows for building complex functionality from simpler components.\n\n```python\ndef repeat(word, n):\n    print(word * n)\n\ndef first_two_lines():\n    repeat(spam, 4)\n    repeat(spam, 4)\n\ndef print_verse():\n    first_two_lines()\n    last_three_lines()\n```\n\nwhen we run `print_verse()`, it calls `first_two_lines()`, which calls `repeat()`, which calls `print()`. this demonstrates how functions can work together to build more complex behavior.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "for_loops", "tags": ["programming", "python", "control-flow"], "summary": "for loops allow repeating a block of code a specified number of times using the range function.", "content": "a `for` statement is used to repeat a computation. here's a simple example:\n\n```python\nfor i in range(2):\n    print(i)\n```\n\n- the first line is a header that ends with a colon\n- the second line is the body, which must be indented\n- the header starts with `for`, a variable name (`i`), and `in`\n- `range(2)` creates a sequence of values `[0, 1]`\n- in python, counting usually starts from `0`\n- when the loop runs, it assigns each value from `range` to `i` and executes the body\n- you can put a `for` loop inside a function\n\nexample with functions:\n\n```python\ndef print_n_verses(n):\n    for i in range(n):\n        print_verse()\n        print()\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "local_variables_and_parameters", "tags": ["programming", "python", "scope"], "summary": "variables created inside functions and parameters are local, meaning they only exist within that function.", "content": "when you create a variable inside a function, it is **local**, which means that it only exists inside the function.\n\n```python\ndef cat_twice(part1, part2):\n    cat = part1 + part2\n    print_twice(cat)\n```\n\nwhen `cat_twice` runs, it creates a local variable named `cat`, which is destroyed when the function ends. if you try to access it outside the function, you get a `nameerror`.\n\nparameters are also local. outside of a function, there is no access to its parameters.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "stack_diagrams", "tags": ["programming", "python", "debugging"], "summary": "stack diagrams show the hierarchy of function calls and the local variables in each function frame.", "content": "to keep track of which variables can be used where, it is useful to draw a **stack diagram**. stack diagrams show:\n\n- the value of each variable\n- the function each variable belongs to\n- the hierarchy of function calls\n\neach function is represented by a **frame** - a box with the function name on the outside and the parameters and local variables inside.\n\nthe frames are arranged in a stack that indicates which function called which. the bottom frame is `__main__` - a special name for the topmost frame. when you create a variable outside of any function, it belongs to `__main__`.\n\nstack diagrams help visualize the scope of variables and the flow of execution through multiple function calls.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "tracebacks", "tags": ["programming", "python", "debugging"], "summary": "tracebacks show the sequence of function calls when an error occurs, helping to identify where the error happened.", "content": "when a runtime error occurs in a function, python displays a **traceback**, which shows:\n\n- the name of the function that was running when the error occurred\n- the name of the function that called it\n- and so on, up the call stack\n\nthe error message includes the traceback, showing the chain of function calls. the function that was running when the error occurred is at the bottom of the traceback.\n\nthe order of functions in the traceback is the same as the order of frames in a stack diagram. tracebacks are essential for debugging as they help identify exactly where and how an error occurred.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "benefits_of_functions", "tags": ["programming", "python", "software-design"], "summary": "functions provide several benefits including code organization, reusability, and easier debugging.", "content": "there are several reasons why dividing programs into functions is valuable:\n\n- **naming**: creating functions gives you an opportunity to name groups of statements, making programs easier to read and debug\n- **code reduction**: functions can make programs smaller by eliminating repetitive code\n- **modular debugging**: dividing long programs into functions allows debugging parts one at a time\n- **reusability**: well-designed functions are often useful for many programs\n- **maintainability**: if you need to make a change, you only have to make it in one place\n\nfunctions are the foundation of programming, enabling modular, maintainable, and reusable code.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging_approach", "tags": ["programming", "python", "debugging"], "summary": "debugging is a systematic process of identifying and fixing errors through hypothesis testing and incremental changes.", "content": "debugging can be challenging but is an essential programming skill. effective debugging approaches include:\n\n- **detective work**: using clues to infer what led to the results you see\n- **experimental science**: forming hypotheses, modifying code, and testing predictions\n- **incremental development**: starting with working code and making small modifications, debugging as you go\n\nif you find yourself spending too much time debugging, it often means you're writing too much code before testing. taking smaller steps can lead to faster progress.\n\ndebugging and programming are often intertwined - programming can be seen as gradually debugging a program until it does what you want.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "turtle_graphics_module", "tags": ["programming", "python", "graphics"], "summary": "the jupyturtle module provides functions for creating simple drawings using turtle graphics.", "content": "the `jupyturtle` module allows you to create simple drawings by giving instructions to an imaginary turtle. key functions include:\n\n- `make_turtle()`: creates a canvas and a turtle for drawing\n- `forward(distance)`: moves the turtle forward, drawing a line\n- `left(angle)`: turns the turtle left by the specified angle in degrees\n- `right(angle)`: turns the turtle right by the specified angle in degrees\n- `penup()`: lifts the pen so the turtle moves without drawing\n- `pendown()`: puts the pen down so the turtle draws when moving\n\nyou can import specific functions to avoid using the module prefix:\n\n```python\nfrom jupyturtle import make_turtle, forward, left, right\n```\n\nthe turtle starts facing east (to the right). moving forward draws line segments, and turning changes the direction.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "encapsulation_and_generalization", "tags": ["programming", "python", "software-design"], "summary": "encapsulation wraps code in functions with names, while generalization replaces specific values with parameters.", "content": "**encapsulation** is the process of wrapping a piece of code in a function. benefits include:\n\n- attaching a name to the code as documentation\n- making code reuse more concise\n- improving code organization\n\nexample of encapsulation:\n\n```python\ndef square():\n    for i in range(4):\n        forward(50)\n        left(90)\n```\n\n**generalization** is the process of replacing something specific (like a number) with something general (like a parameter). this makes functions more flexible:\n\n```python\ndef square(length):\n    for i in range(4):\n        forward(length)\n        left(90)\n```\n\ngeneralization allows the function to work with different values, making it more reusable.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "function_parameters_and_keyword_arguments", "tags": ["programming", "python", "functions"], "summary": "functions can take multiple parameters, and keyword arguments make function calls more readable.", "content": "functions can take multiple parameters to increase their flexibility:\n\n```python\ndef polygon(n, length):\n    angle = 360 / n\n    for i in range(n):\n        forward(length)\n        left(angle)\n```\n\nwhen functions have multiple numeric parameters, it can be helpful to use **keyword arguments** (also called named arguments) to make the code more readable:\n\n```python\npolygon(n=7, length=30)\n```\n\nkeyword arguments:\n- include the parameter names in the argument list\n- make function calls more self-documenting\n- can be specified in any order\n- use the assignment operator `=` to associate arguments with parameters\n\nthis syntax reminds us how arguments and parameters work - when you call a function, the arguments are assigned to the parameters.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "refactoring", "tags": ["programming", "python", "software-design"], "summary": "refactoring improves code structure without changing its behavior, often by creating more general functions.", "content": "**refactoring** is the process of modifying working code to improve its structure without changing its behavior. this often involves:\n\n- creating more general functions\n- eliminating code duplication\n- improving function interfaces\n\nexample of refactoring:\n\nfirst, create a general `polyline` function:\n\n```python\ndef polyline(n, length, angle):\n    for i in range(n):\n        forward(length)\n        left(angle)\n```\n\nthen rewrite `polygon` to use `polyline`:\n\n```python\ndef polygon(n, length):\n    angle = 360.0 / n\n    polyline(n, length, angle)\n```\n\nand create `arc` using `polyline`:\n\n```python\ndef arc(radius, angle):\n    arc_length = 2 * math.pi * radius * angle / 360\n    n = 30\n    length = arc_length / n\n    step_angle = angle / n\n    polyline(n, length, step_angle)\n```\n\nfinally, rewrite `circle` using `arc`:\n\n```python\ndef circle(radius):\n    arc(radius, 360)\n```\n\nrefactoring often happens as you understand a problem better through coding.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "development_plan", "tags": ["programming", "python", "methodology"], "summary": "a systematic approach to program development using encapsulation and generalization.", "content": "a **development plan** is a process for writing programs. the \"encapsulation and generalization\" approach involves:\n\n1. **start small**: write a small program with no function definitions\n2. **encapsulate**: identify coherent pieces and wrap them in functions with descriptive names\n3. **generalize**: add parameters to make functions more flexible\n4. **iterate**: repeat steps 1-3 until you have a set of working functions\n5. **refactor**: look for opportunities to improve by eliminating duplication and creating more general functions\n\nthis approach is useful when you don't know ahead of time how to divide the program into functions, allowing you to design as you go along.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "interface_and_implementation", "tags": ["programming", "python", "software-design"], "summary": "function design has two parts: the interface (how it's used) and implementation (how it works).", "content": "the design of a function has two distinct parts:\n\n**interface**: how the function is used, including:\n- function name\n- parameters it takes\n- what the function is supposed to do\n- return value (if any)\n\n**implementation**: how the function accomplishes its task, including:\n- the code inside the function\n- algorithms used\n- internal variables\n\nexample of different implementations with the same interface:\n\n```python\n# implementation 1\ndef circle(radius):\n    circumference = 2 * math.pi * radius\n    n = 30\n    length = circumference / n\n    polygon(n, length)\n\n# implementation 2 (refactored)\ndef circle(radius):\n    arc(radius, 360)\n```\n\nboth functions have the same interface but different implementations. a good interface should be simple to explain and use.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "docstrings", "tags": ["programming", "python", "documentation"], "summary": "docstrings are multiline strings at the beginning of functions that document their interface.", "content": "a **docstring** is a string at the beginning of a function that explains its interface. docstrings are typically triple-quoted **multiline strings** that can span multiple lines.\n\nexample:\n\n```python\ndef polyline(n, length, angle):\n    \"\"\"draws line segments with the given length and angle between them.\n\n    n: integer number of line segments\n    length: length of the line segments\n    angle: angle between segments (in degrees)\n    \"\"\"\n    for i in range(n):\n        forward(length)\n        left(angle)\n```\n\na good docstring should:\n- concisely explain what the function does\n- explain what effect each parameter has\n- indicate the expected type of each parameter\n- avoid implementation details\n\nwriting clear docstrings is an important part of interface design. if a function is hard to explain, it might need a better interface.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "preconditions_and_postconditions", "tags": ["programming", "python", "debugging"], "summary": "preconditions are requirements before a function runs; postconditions are requirements after it finishes.", "content": "**preconditions** are requirements that should be true before a function starts executing. they are the responsibility of the caller.\n\nexample for `polyline`:\n- `n` must be an integer\n- `length` should be a positive number\n- `angle` must be a number (understood to be in degrees)\n\n**postconditions** are requirements that should be true after the function finishes, including:\n- the intended effect of the function\n- any side effects\n\nfor debugging:\n- if preconditions are violated and the function fails, the bug is in the caller\n- if preconditions are satisfied but postconditions are not, the bug is in the function\n\nclear preconditions and postconditions form a contract between the function and its caller, helping with debugging and ensuring correct usage.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "integer_division_and_modulus", "tags": ["programming", "python", "operators"], "summary": "integer division (//) divides and rounds down, while modulus (%) returns the remainder of division.", "content": "the **integer division** operator, `//`, divides two numbers and rounds down to an integer:\n\n```python\nminutes = 105\nhours = minutes // 60  # result: 1\n```\n\nthe **modulus operator**, `%`, divides two numbers and returns the remainder:\n\n```python\nremainder = minutes % 60  # result: 45\n```\n\n**uses of modulus operator:**\n- check divisibility: if `x % y == 0`, then `x` is divisible by `y`\n- extract digits: `x % 10` gives the right-most digit\n- clock arithmetic: `(11 + 3) % 12` gives `2` (2 pm)\n- extract last digits: `x % 100` gives the last two digits", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "boolean_expressions", "tags": ["programming", "python", "logic"], "summary": "boolean expressions evaluate to true or false using relational operators like ==, !=, >, <, >=, <=", "content": "a **boolean expression** is an expression that evaluates to either `true` or `false`. \n\n**relational operators:**\n- `==` (equal to)\n- `!=` (not equal to)\n- `>` (greater than)\n- `<` (less than)\n- `>=` (greater than or equal to)\n- `<=` (less than or equal to)\n\nexamples:\n```python\n5 == 5      # true\n5 == 7      # false\nx = 5\nx == 5      # true\n```\n\nimportant: use `==` for comparison, not `=` (which is for assignment).\n\n`true` and `false` are special values of type `bool`, not strings.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "logical_operators", "tags": ["programming", "python", "logic"], "summary": "logical operators (and, or, not) combine boolean expressions to form more complex conditions.", "content": "**logical operators** combine boolean values:\n\n- `and`: both conditions must be true\n- `or`: at least one condition must be true\n- `not`: negates a boolean expression\n\nexamples:\n```python\nx > 0 and x < 10          # true only if x between 0 and 10\nx % 2 == 0 or x % 3 == 0  # true if x divisible by 2 or 3\nnot x > y                 # true if x > y is false\n```\n\npython is flexible with logical operators - any nonzero number is interpreted as `true`, but this can be confusing and is best avoided.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "if_statements", "tags": ["programming", "python", "control-flow"], "summary": "if statements execute code conditionally based on boolean expressions.", "content": "**conditional statements** allow programs to check conditions and change behavior accordingly.\n\n**basic if statement:**\n```python\nif x > 0:\n    print('x is positive')\n```\n\n- `if` is a python keyword\n- the boolean expression after `if` is called the **condition**\n- the indented statements form a **block**\n- if the condition is true, the block executes; if false, it doesn't\n\n**pass statement:** used when a block must exist but should do nothing:\n```python\nif x < 0:\n    pass  # todo: handle negative values\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "else_and_elif_clauses", "tags": ["programming", "python", "control-flow"], "summary": "else provides alternative execution when if condition is false; elif provides multiple alternative conditions.", "content": "**else clause:** provides an alternative when the `if` condition is false:\n```python\nif x % 2 == 0:\n    print('x is even')\nelse:\n    print('x is odd')\n```\n\nthe alternatives are called **branches**.\n\n**chained conditionals** with `elif` (else if):\n```python\nif x < y:\n    print('x is less than y')\nelif x > y:\n    print('x is greater than y')\nelse:\n    print('x and y are equal')\n```\n\n- no limit on number of `elif` clauses\n- conditions checked in order\n- only first true branch executes\n- `else` clause is optional but must be last", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "nested_conditionals", "tags": ["programming", "python", "control-flow"], "summary": "conditional statements can be nested inside other conditionals, but should be avoided when possible.", "content": "one conditional can be nested within another:\n```python\nif x == y:\n    print('x and y are equal')\nelse:\n    if x < y:\n        print('x is less than y')\n    else:\n        print('x is greater than y')\n```\n\n**nested conditionals** can be difficult to read. logical operators often provide a simpler alternative:\n\ninstead of:\n```python\nif 0 < x:\n    if x < 10:\n        print('x is positive single-digit')\n```\n\nuse:\n```python\nif 0 < x and x < 10:\n    print('x is positive single-digit')\n```\n\nor more concisely:\n```python\nif 0 < x < 10:\n    print('x is positive single-digit')\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "recursion", "tags": ["programming", "python", "algorithms"], "summary": "recursion occurs when a function calls itself, with a base case to terminate the recursion.", "content": "a function that calls itself is **recursive**. recursion requires:\n- a function that calls itself\n- a **base case** that doesn't make a recursive call\n- progress toward the base case\n\n**example - countdown:**\n```python\ndef countdown(n):\n    if n <= 0:\n        print('blastoff!')\n    else:\n        print(n)\n        countdown(n-1)\n```\n\n**example - print n times:**\n```python\ndef print_n_times(string, n):\n    if n > 0:\n        print(string)\n        print_n_times(string, n-1)\n```\n\nfor simple cases, `for` loops may be easier, but some problems are naturally recursive.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "stack_diagrams_for_recursion", "tags": ["programming", "python", "debugging"], "summary": "recursive functions create multiple stack frames, each with its own parameters and local variables.", "content": "when a recursive function runs, it creates multiple **stack frames**, each with:\n- the function name\n- parameters with their current values\n- local variables\n\nfor `countdown(3)`, the stack would have frames for:\n- `countdown` with `n=3`\n- `countdown` with `n=2`\n- `countdown` with `n=1`\n- `countdown` with `n=0` (base case)\n\nthe frame where `n=0` is the **base case** - it doesn't make a recursive call.\n\nstack diagrams help visualize:\n- the sequence of recursive calls\n- parameter values at each level\n- when the base case is reached", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "infinite_recursion", "tags": ["programming", "python", "debugging"], "summary": "infinite recursion occurs when a recursive function never reaches its base case, eventually causing a stack overflow.", "content": "**infinite recursion** occurs when:\n- there is no base case, or\n- the recursion never reaches the base case\n\nexample:\n```python\ndef recurse():\n    recurse()  # no base case - infinite recursion\n```\n\n**consequences:**\n- program creates stack frames indefinitely\n- eventually exceeds python's recursion limit\n- causes `recursionerror` (runtime error)\n\n**prevention:**\n- ensure every recursive function has a base case\n- verify the recursion progresses toward the base case\n- test with various inputs to ensure termination", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "keyboard_input", "tags": ["programming", "python", "io"], "summary": "the input() function gets user input as a string, with optional prompt display.", "content": "the `input()` function:\n- stops program execution\n- waits for user input\n- returns the input as a string when user presses enter\n\n**basic usage:**\n```python\ntext = input()\n```\n\n**with prompt:**\n```python\nname = input('what...is your name?\\n')\n```\n\nthe `\\n` represents a **newline** character, creating a line break.\n\n**converting input types:**\n```python\nspeed = input('enter speed: ')\nspeed_int = int(speed)  # convert to integer\n```\n\nif conversion fails (e.g., non-numeric input), it causes a `valueerror`.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging_techniques", "tags": ["programming", "python", "debugging"], "summary": "effective debugging involves reading error messages carefully and understanding where problems actually occur.", "content": "**debugging tips:**\n\n1. **focus on key information in error messages:**\n   - error type\n   - location where error was detected\n\n2. **syntax errors:**\n   - often related to invisible characters (spaces/tabs)\n   - error location may be misleading\n   - check indentation carefully\n\n3. **runtime errors:**\n   - error location indicates where problem was discovered, not necessarily where it occurred\n   - trace back through the code to find the actual cause\n\n4. **example debugging scenario:**\n   ```python\n   ratio = numerator // denominator  # integer division - may cause 0\n   decibels = 10 * math.log10(ratio)  # error occurs here, but cause is above\n   ```\n\nalways read error messages carefully but verify the actual problem location.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "return_values", "tags": ["function", "return", "value"], "summary": "functions can return values that can be assigned to variables or used in expressions, unlike functions that only display output or perform actions.", "content": "in previous chapters, we've used built-in functions -- like `abs` and `round` -- and functions in the math module -- like `sqrt` and `pow`. when you call one of these functions, it returns a value you can assign to a variable or use as part of an expression.\n\nthe functions we have written so far are different. some use the `print` function to display values, and some use turtle functions to draw figures. but they don't return values we assign to variables or use in expressions.\n\nin this chapter, we'll see how to write functions that return values.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "some_functions_have_return_values", "tags": ["return value", "function call", "expression"], "summary": "functions like math.sqrt return values that can be displayed, assigned to variables, or used in expressions.", "content": "when you call a function like `math.sqrt`, the result is called a **return value**. if the function call appears at the end of a cell, jupyter displays the return value immediately.\n\nif you assign the return value to a variable, it doesn't get displayed. but you can display it later. or you can use the return value as part of an expression.\n\nhere's an example of a function that returns a value:\n\n```python\ndef circle_area(radius):\n    area = math.pi * radius**2\n    return area\n```\n\n`circle_area` takes `radius` as a parameter and computes the area of a circle with that radius. the last line is a `return` statement that returns the value of `area`.\n\nwe can assign the return value to a variable, or use it as part of an expression. however, we can't access local variables like `area` from outside the function.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "and_some_have_none", "tags": ["None", "return", "pure function"], "summary": "functions without return statements return none, while pure functions only return values without side effects.", "content": "if a function doesn't have a `return` statement, it returns `none`, which is a special value like `true` and `false`. for example, here's the `repeat` function from chapter 3:\n\n```python\ndef repeat(word, n):\n    print(word * n)\n```\n\nthis function uses the `print` function to display a string, but it does not use a `return` statement to return a value. if we assign the result to a variable, it displays the string anyway, but the variable gets the value `none`.\n\nhere's a function similar to `repeat` except that has a return value:\n\n```python\ndef repeat_string(word, n):\n    return word * n\n```\n\nnotice that we can use an expression in a `return` statement, not just a variable. with this version, we can assign the result to a variable without displaying anything.\n\na function like this is called a **pure function** because it doesn't display anything or have any other effect -- other than returning a value.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "return_values_and_conditionals", "tags": ["conditional", "return", "dead code"], "summary": "return statements can be used in conditionals, but all code paths must return a value to avoid none returns.", "content": "if python did not provide `abs`, we could write it like this:\n\n```python\ndef absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x\n```\n\nif `x` is negative, the first `return` statement returns `-x` and the function ends immediately. otherwise, the second `return` statement returns `x` and the function ends.\n\nhowever, if you put `return` statements in a conditional, you have to make sure that every possible path through the program hits a `return` statement. for example, here's an incorrect version of `absolute_value`:\n\n```python\ndef absolute_value_wrong(x):\n    if x < 0:\n        return -x\n    if x > 0:\n        return x\n```\n\nwhen `x` is `0`, neither condition is true, and the function ends without hitting a `return` statement, which means that the return value is `none`.\n\nas another example, here's a version of `absolute_value` with an extra `return` statement at the end:\n\n```python\ndef absolute_value_extra_return(x):\n    if x < 0:\n        return -x\n    else:\n        return x\n\n    return 'this is dead code'\n```\n\nif `x` is negative, the first `return` statement runs and the function ends. otherwise the second `return` statement runs and the function ends. either way, we never get to the third `return` statement -- so it can never run.\n\ncode that can never run is called **dead code**. in general, dead code doesn't do any harm, but it often indicates a misunderstanding, and it might be confusing to someone trying to understand the program.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "incremental_development", "tags": ["development", "debugging", "scaffolding"], "summary": "incremental development involves adding and testing small amounts of code at a time, using temporary variables and print statements for debugging.", "content": "as you write larger functions, you might find yourself spending more time debugging. to deal with increasingly complex programs, you might want to try **incremental development**, which is a way of adding and testing only a small amount of code at a time.\n\nas an example, suppose you want to find the distance between two points represented by the coordinates $(x_1, y_1)$ and $(x_2, y_2)$. by the pythagorean theorem, the distance is:\n\n$$\\mathrm{distance} = \\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}$$\n\nthe first step is to consider what a `distance` function should look like in python -- that is, what are the inputs (parameters) and what is the output (return value)?\n\nfor this function, the inputs are the coordinates of the points. the return value is the distance. immediately you can write an outline of the function:\n\n```python\ndef distance(x1, y1, x2, y2):\n    return 0.0\n```\n\nthis version doesn't compute distances yet -- it always returns zero. but it is a complete function with a return value, which means that you can test it before you make it more complicated.\n\nthe process continues by adding small pieces of code and testing each one:\n\n1. compute differences `dx` and `dy` and display them\n2. compute the sum of squares `dsquared` and display it\n3. compute the square root and display it\n4. replace the `print` statement with a `return` statement\n\nthe `print` statements we wrote are useful for debugging, but once the function is working, we can remove them. code like that is called **scaffolding** because it is helpful for building the program but is not part of the final product.\n\nthe key aspects of incremental development are:\n\n1. start with a working program, make small changes, and test after every change.\n2. use variables to hold intermediate values so you can display and check them.\n3. once the program is working, remove the scaffolding.\n\nat any point, if there is an error, you should have a good idea where it is. incremental development can save you a lot of debugging time.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "boolean_functions", "tags": ["boolean", "function", "conditional"], "summary": "functions can return boolean values true and false, often used to encapsulate complex tests.", "content": "functions can return the boolean values `true` and `false`, which is often convenient for encapsulating a complex test in a function. for example, `is_divisible` checks whether `x` is divisible by `y` with no remainder.\n\n```python\ndef is_divisible(x, y):\n    if x % y == 0:\n        return true\n    else:\n        return false\n```\n\ninside the function, the result of the `==` operator is a boolean, so we can write the function more concisely by returning it directly.\n\n```python\ndef is_divisible(x, y):\n    return x % y == 0\n```\n\nboolean functions are often used in conditional statements. it might be tempting to write something like:\n\n```python\nif is_divisible(6, 2) == true:\n    print('divisible')\n```\n\nbut the comparison is unnecessary.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "recursion_with_return_values", "tags": ["recursion", "factorial", "Turing complete"], "summary": "recursive functions with return values enable turing completeness, allowing computation of any algorithm.", "content": "now that we can write functions with return values, we can write recursive functions with return values, and with that capability, we have passed an important threshold -- the subset of python we have is now **turing complete**, which means that we can perform any computation that can be described by an algorithm.\n\nto demonstrate recursion with return values, we'll evaluate a few recursively defined mathematical functions. a recursive definition is similar to a circular definition, in the sense that the definition refers to the thing being defined.\n\nfor example, the factorial function has the following recursive definition:\n\n$$\\begin{aligned}\n0! &= 1 \\\\\n n! &= n~(n-1)!\n\\end{aligned}$$\n\nthis definition says that the factorial of $0$ is $1$, and the factorial of any other value, $n$, is $n$ multiplied by the factorial of $n-1$.\n\nif you can write a recursive definition of something, you can write a python program to evaluate it. following an incremental development process, we can implement factorial as:\n\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        recurse = factorial(n-1)\n        return n * recurse\n```\n\nthe flow of execution for this program involves multiple recursive calls that build up a stack of function calls, with each call waiting for the result of the next call before it can complete its computation.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "leap_of_faith", "tags": ["recursion", "debugging", "mental model"], "summary": "when reading recursive code, assume recursive calls work correctly rather than tracing every call.", "content": "following the flow of execution is one way to read programs, but it can quickly become overwhelming. an alternative is what i call the \"leap of faith\". when you come to a function call, instead of following the flow of execution, you *assume* that the function works correctly and returns the right result.\n\nin fact, you are already practicing this leap of faith when you use built-in functions. when you call `abs` or `math.sqrt`, you don't examine the bodies of those functions -- you just assume that they work.\n\nthe same is true when you call one of your own functions. for example, earlier we wrote a function called `is_divisible` that determines whether one number is divisible by another. once we convince ourselves that this function is correct, we can use it without looking at the body again.\n\nthe same is true of recursive programs. when you get to the recursive call, instead of following the flow of execution, you should assume that the recursive call works and then ask yourself, \"assuming that i can compute the factorial of $n-1$, can i compute the factorial of $n$?\" the recursive definition of factorial implies that you can, by multiplying by $n$.\n\nof course, it's a bit strange to assume that the function works correctly when you haven't finished writing it, but that's why it's called a leap of faith!", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "fibonacci", "tags": ["recursion", "Fibonacci", "inefficiency"], "summary": "the fibonacci sequence can be implemented recursively but this approach is inefficient for larger values.", "content": "after `factorial`, the most common example of a recursive function is `fibonacci`, which has the following definition:\n\n$$\\begin{aligned}\n\\mathrm{fibonacci}(0) &= 0 \\\\\n\\mathrm{fibonacci}(1) &= 1 \\\\\n\\mathrm{fibonacci}(n) &= \\mathrm{fibonacci}(n-1) + \\mathrm{fibonacci}(n-2)\n\\end{aligned}$$\n\ntranslated into python, it looks like this:\n\n```python\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif  n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n```\n\nif you try to follow the flow of execution here, even for small values of $n$, your head explodes. but according to the leap of faith, if you assume that the two recursive calls work correctly, you can be confident that the last `return` statement is correct.\n\nas an aside, this way of computing fibonacci numbers is very inefficient. in chapter 10 i'll explain why and suggest a way to improve it.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "checking_types", "tags": ["type checking", "input validation", "error handling"], "summary": "input validation using isinstance prevents errors like infinite recursion from incorrect parameter types.", "content": "what happens if we call `factorial` and give it `1.5` as an argument? it results in infinite recursion because if `n` is not an integer, we can *miss* the base case and recurse forever.\n\nin this example, the initial value of `n` is `1.5`. in the first recursive call, the value of `n` is `0.5`. in the next, it is `-0.5`. from there, it gets smaller (more negative), but it will never be `0`.\n\nto avoid infinite recursion we can use the built-in function `isinstance` to check the type of the argument. here's how we check whether a value is an integer:\n\n```python\nisinstance(3, int)    # returns true\nisinstance(1.5, int)  # returns false\n```\n\nnow here's a version of `factorial` with error-checking:\n\n```python\ndef factorial(n):\n    if not isinstance(n, int):\n        print('factorial is only defined for integers.')\n        return none\n    elif n < 0:\n        print('factorial is not defined for negative numbers.')\n        return none\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\n\nfirst it checks whether `n` is an integer. if not, it displays an error message and returns `none`. then it checks whether `n` is negative. if so, it displays an error message and returns `none`. if we get past both checks, we know that `n` is a non-negative integer, so we can be confident the recursion will terminate.\n\nchecking the parameters of a function to make sure they have the correct types and values is called **input validation**.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging", "tags": ["debugging", "scaffolding", "print statements"], "summary": "debugging functions involves checking arguments, function logic, and return value usage, using print statements for visibility.", "content": "breaking a large program into smaller functions creates natural checkpoints for debugging. if a function is not working, there are three possibilities to consider:\n\n- there is something wrong with the arguments the function is getting -- that is, a precondition is violated.\n- there is something wrong with the function -- that is, a postcondition is violated.\n- the caller is doing something wrong with the return value.\n\nto rule out the first possibility, you can add a `print` statement at the beginning of the function that displays the values of the parameters (and maybe their types). or you can write code that checks the preconditions explicitly.\n\nif the parameters look good, you can add a `print` statement before each `return` statement and display the return value. if possible, call the function with arguments that make it easy check the result.\n\nif the function seems to be working, look at the function call to make sure the return value is being used correctly -- or used at all!\n\nadding `print` statements at the beginning and end of a function can help make the flow of execution more visible. for example, here is a version of `factorial` with print statements:\n\n```python\ndef factorial(n):\n    space = ' ' * (4 * n)\n    print(space, 'factorial', n)\n    if n == 0:\n        print(space, 'returning 1')\n        return 1\n    else:\n        recurse = factorial(n-1)\n        result = n * recurse\n        print(space, 'returning', result)\n        return result\n```\n\n`space` is a string of space characters that controls the indentation of the output. if you are confused about the flow of execution, this kind of output can be helpful. it takes some time to develop effective scaffolding, but a little bit of scaffolding can save a lot of debugging.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "iteration_and_search", "tags": ["iteration", "search", "strings", "files"], "summary": "using for loops to iterate through strings and files, and implementing search patterns to analyze text data.", "content": "in 1939 ernest vincent wright published a 50,000 word novel called *gadsby* that does not contain the letter \"e\". since \"e\" is the most common letter in english, writing even a few words without using it is difficult. to get a sense of how difficult, in this chapter we'll compute the fraction of english words have at least one \"e\".\n\nfor that, we'll use `for` statements to loop through the letters in a string and the words in a file, and we'll update variables in a loop to count the number of words that contain an \"e\". we'll use the `in` operator to check whether a letter appears in a word, and you'll learn a programming pattern called a \"linear search\".", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "loops_and_strings", "tags": ["for loop", "loop variable", "string iteration"], "summary": "using for loops to iterate through characters in strings and check for specific letters.", "content": "we can use a `for` loop to display the letters in a string. the variable defined in a `for` loop is called the **loop variable**. now that we can loop through the letters in a word, we can check whether it contains the letter \"e\".\n\nwe can encapsulate this logic in a function:\n\n```python\ndef has_e(word):\n    for letter in word:\n        if letter == 'e' or letter == 'e':\n            return true\n    return false\n```\n\nthis function takes a word as a parameter and returns `true` if the word contains an \"e\" and `false` otherwise.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "reading_the_word_list", "tags": ["file handling", "file object", "methods"], "summary": "working with files using file objects and methods to read and process text data.", "content": "to see how many words contain an \"e\", we'll need a word list. the one we'll use is a list of about 114,000 official crosswords; that is, words that are considered valid in crossword puzzles and other word games.\n\nto read it, we'll use the built-in function `open`, which takes the name of the file as a parameter and returns a **file object** we can use to read the file. the file object provides a function called `readline`, which reads characters from the file until it gets to a newline and returns the result as a string.\n\nthe syntax for calling `readline` is different from functions we've seen so far. that's because it is a **method**, which is a function associated with an object. in this case `readline` is associated with the file object, so we call it using the name of the object, the dot operator, and the name of the method.\n\nto remove the newline from the end of the word, we can use `strip`, which is a method associated with strings. `strip` removes whitespace characters -- including spaces, tabs, and newlines -- from the beginning and end of the string.\n\nyou can also use a file object as part of a `for` loop to read through all lines in a file.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "updating_variables", "tags": ["variables", "assignment", "update", "counter"], "summary": "modifying variable values through assignment and using counters to track occurrences.", "content": "it is legal to make more than one assignment to the same variable. a new assignment makes an existing variable refer to a new value (and stop referring to the old value).\n\na common kind of assignment is an **update**, where the new value of the variable depends on the old. for example: `x = x + 1` means \"get the current value of `x`, add one, and assign the result back to `x`.\"\n\nbefore you can update a variable, you have to **initialize** it, usually with a simple assignment.\n\nincreasing the value of a variable is called an **increment**; decreasing the value is called a **decrement**. because these operations are so common, python provides **augmented assignment operators** that update a variable more concisely. for example, the `+=` operator increments a variable by the given amount.\n\na variable used to count the number of times something happens is called a **counter**.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "looping_and_counting", "tags": ["counting", "file processing", "percentage calculation"], "summary": "using loops and counters to process files and calculate statistics.", "content": "we can use counters to count the number of words in the word list and the number of words that contain an \"e\". by comparing these counts, we can calculate what percentage of words use the letter \"e\".\n\nabout two-thirds of the words use the letter \"e\", which explains why it's difficult to craft a book without using any such words.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "the_in_operator", "tags": ["in operator", "string methods", "simplification"], "summary": "using the in operator and string methods to simplify search functions.", "content": "python provides an operator, `in`, that checks whether a character appears in a string. so we can rewrite `has_e` more simply:\n\n```python\ndef has_e(word):\n    return 'e' in word or 'e' in word\n```\n\nwe can simplify this function even more using the method `lower`, which converts the letters in a string to lowercase:\n\n```python\ndef has_e(word):\n    return 'e' in word.lower()\n```\n\n`lower` makes a new string -- it does not modify the existing string.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "search", "tags": ["linear search", "search pattern", "function generalization"], "summary": "implementing linear search pattern to check if elements from one sequence appear in another.", "content": "based on the simpler version of `has_e`, we can write a more general function called `uses_any` that takes a second parameter that is a string of letters. it returns `true` if the word uses any of the letters and `false` otherwise.\n\n```python\ndef uses_any(word, letters):\n    for letter in word.lower():\n        if letter in letters.lower():\n            return true\n    return false\n```\n\nthe structure of `uses_any` is similar to `has_e`. it loops through the letters in `word` and checks them one at a time. if it finds one that appears in `letters`, it returns `true` immediately. if it gets all the way through the loop without finding any, it returns `false`.\n\nthis pattern is called a **linear search**.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "doctest", "tags": ["testing", "documentation", "doctest"], "summary": "using doctest to create and run tests within function documentation.", "content": "it is possible to use a docstring to *test* a function. here's a version of `uses_any` with a docstring that includes tests:\n\n```python\ndef uses_any(word, letters):\n    \"\"\"checks if a word uses any of a list of letters.\n\n    >>> uses_any('banana', 'aeiou')\n    true\n    >>> uses_any('apple', 'xyz')\n    false\n    \"\"\"\n    for letter in word.lower():\n        if letter in letters.lower():\n            return true\n    return false\n```\n\neach test begins with `>>>`, which is used as a prompt in some python environments to indicate where the user can type code. in a doctest, the prompt is followed by an expression, usually a function call. the following line indicates the value the expression should have if the function works correctly.\n\nto run these tests, we import the `doctest` module and use `run_docstring_examples`. if all tests pass, no output is displayed. if a test fails, the output includes the example that failed, the value the function was expected to produce, and the value the function actually produced.\n\nif a test runs and the result is as expected, the test **passes**. if a test runs and the result is not as expected, the test **fails**.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "strings_and_regular_expressions", "tags": ["strings", "sequences", "regular expressions", "pattern matching"], "summary": "working with strings as sequences of characters and using regular expressions for advanced pattern matching and text processing.", "content": "strings are not like integers, floats, and booleans. a string is a **sequence**, which means it contains multiple values in a particular order. in this chapter we'll see how to access the values that make up a string, and we'll use functions that process strings.\n\nwe'll also use regular expressions, which are a powerful tool for finding patterns in a string and performing operations like search and replace.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "a_string_is_a_sequence", "tags": ["indexing", "characters", "string access"], "summary": "accessing individual characters in strings using indices and understanding zero-based indexing.", "content": "a string is a sequence of characters. a **character** can be a letter (in almost any alphabet), a digit, a punctuation mark, or white space.\n\nyou can select a character from a string with the bracket operator. the expression in brackets is an **index**, so called because it *indicates* which character in the sequence to select. the index with value `1` is actually the second letter of the string. an index is an offset from the beginning of the string, so the offset of the first letter is `0`.\n\nyou can think of `'b'` as the 0th letter of `'banana'` -- pronounced \"zero-eth\". the index in brackets can be a variable or an expression that contains variables and operators, but the value of the index has to be an integer.\n\nto get the last letter of a string, you can use a negative index, which counts backward from the end. the index `-1` selects the last letter, `-2` selects the second to last, and so on.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "string_slices", "tags": ["slicing", "substrings", "empty string"], "summary": "extracting portions of strings using slice notation with start and end indices.", "content": "a segment of a string is called a **slice**. selecting a slice is similar to selecting a character. the operator `[n:m]` returns the part of the string from the `n`th character to the `m`th character, including the first but excluding the second.\n\nif you omit the first index, the slice starts at the beginning of the string. if you omit the second index, the slice goes to the end of the string. if the first index is greater than or equal to the second, the result is an **empty string**, represented by two quotation marks. an empty string contains no characters and has length 0.\n\nusing `[:]` without indices returns the entire string.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "strings_are_immutable", "tags": ["immutability", "string modification"], "summary": "understanding that strings cannot be modified in place and creating new strings instead.", "content": "it is tempting to use the `[]` operator on the left side of an assignment, with the intention of changing a character in a string, but this causes a `typeerror`. the reason for this error is that strings are **immutable**, which means you can't change an existing string. the best you can do is create a new string that is a variation of the original.\n\nfor example, to change the first character of a string, you can concatenate a new first letter onto a slice of the original string. this has no effect on the original string.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "string_comparison", "tags": ["string comparison", "alphabetical order", "case sensitivity"], "summary": "comparing strings using relational operators and handling case sensitivity issues.", "content": "the relational operators work on strings. to see if two strings are equal, we can use the `==` operator. other relational operations are useful for putting words in alphabetical order.\n\npython does not handle uppercase and lowercase letters the same way people do. all the uppercase letters come before all the lowercase letters. to solve this problem, we can convert strings to a standard format, such as all lowercase, before performing the comparison.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "string_methods", "tags": ["methods", "string operations", "method invocation"], "summary": "using built-in string methods to perform various operations on strings.", "content": "strings provide methods that perform a variety of useful operations. a method is similar to a function -- it takes arguments and returns a value -- but the syntax is different. for example, the method `upper` takes a string and returns a new string with all uppercase letters.\n\ninstead of the function syntax `upper(word)`, it uses the method syntax `word.upper()`. this use of the dot operator specifies the name of the method and the name of the string to apply the method to. the empty parentheses indicate that this method takes no arguments.\n\na method call is called an **invocation**; in this case, we would say that we are invoking `upper` on `word`.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "writing_files", "tags": ["file handling", "file modes", "text processing"], "summary": "reading from and writing to files, including filtering content and managing file objects.", "content": "string operators and methods are useful for reading and writing text files. to write to a file, we can open it for writing using the mode `'w'`. if the file doesn't exist, it will be created; if it already exists, the contents will be replaced.\n\nwe can use methods like `startswith` and `endswith` to filter lines in a file. the `break` statement \"breaks\" out of the loop -- that is, it causes the loop to end immediately. when we're done with file objects, we should close them using the `close` method.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "find_and_replace", "tags": ["string search", "replacement", "count method"], "summary": "searching for text patterns in files and replacing them with new content.", "content": "to see whether a line contains a particular sequence, we can use the `in` operator, which checks whether this sequence of characters appears anywhere in the line. to get the total number of times a sequence appears, we can use the `count` method, which returns the number of times a sequence appears in a string.\n\nwe can replace sequences in text using the `replace` method, which creates a new string with all occurrences of a substring replaced with another substring.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "regular_expressions", "tags": ["regex", "pattern matching", "search"], "summary": "using regular expressions for advanced pattern matching and text searching.", "content": "if we know exactly what sequence of characters we're looking for, we can use the `in` operator to find it and the `replace` method to replace it. but there is another tool, called a **regular expression** that can also perform these operations -- and a lot more.\n\na module called `re` provides functions related to regular expressions. we can use the `search` function to check whether a **pattern** appears in the text. if the pattern appears in the text, `search` returns a `match` object that contains the results of the search.\n\nregular expressions can do things the `in` operator cannot. for example, if the pattern includes the vertical bar character, `'|'`, it can match either the sequence on the left or the sequence on the right. the special character `'^'` matches the beginning of a string, and `'$'` matches the end of a string.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "string_substitution", "tags": ["regex substitution", "pattern groups", "optional characters"], "summary": "using regular expressions for advanced find-and-replace operations with pattern matching.", "content": "we can use the `sub` function in the `re` module, which does **string substitution**. the first argument is the pattern we want to find and replace, the second is what we want to replace it with, and the third is the string we want to search.\n\nregular expressions support more advanced patterns. for example, parentheses enclose the part of the pattern the vertical bar applies to. the special character `'?'` means that the previous character is optional. this allows for flexible pattern matching that can handle variations in spelling or formatting.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging", "tags": ["debugging", "shell commands", "file inspection"], "summary": "using shell commands and file inspection techniques for debugging file processing operations.", "content": "when you are reading and writing files, debugging can be tricky. if you are working in a jupyter notebook, you can use **shell commands** to help. for example, to display the first few lines of a file, you can use the command `!head`, and to display the last few lines, you can use `!tail`.\n\nthe initial exclamation point, `!`, indicates that this is a shell command, which is not part of python. when you are working with large files, debugging can be difficult because there might be too much output to check by hand. a good debugging strategy is to start with just part of the file, get the program working, and then run it with the whole file.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "lists_introduction", "tags": ["list", "sequence", "elements"], "summary": "a list is a sequence of values that can be of any type, similar to strings but more flexible.", "content": "like a string, a **list** is a sequence of values. in a string, the values are characters; in a list, they can be any type. the values in a list are called **elements**.\n\nthere are several ways to create a new list; the simplest is to enclose the elements in square brackets (`[` and `]`).\n\n```python\nnumbers = [42, 123]\ncheeses = ['cheddar', 'edam', 'gouda']\n```\n\nthe elements of a list don't have to be the same type. the following list contains a string, a float, an integer, and even another list.\n\n```python\nt = ['spam', 2.0, 5, [10, 20]]\n```\n\na list within another list is **nested**. a list that contains no elements is called an empty list; you can create one with empty brackets, `[]`.\n\n```python\nempty = []\n```\n\nthe `len` function returns the length of a list.\n\n```python\nlen(cheeses)  # returns 3\nlen(empty)   # returns 0\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "lists_are_mutable", "tags": ["mutable", "indexing", "assignment"], "summary": "lists are mutable sequences that can be modified by assigning to elements using bracket notation.", "content": "to read an element of a list, we can use the bracket operator. the index of the first element is `0`.\n\n```python\ncheeses[0]  # returns 'cheddar'\n```\n\nunlike strings, lists are mutable. when the bracket operator appears on the left side of an assignment, it identifies the element of the list that will be assigned.\n\n```python\nnumbers[1] = 17\nnumbers  # returns [42, 17]\n```\n\nlist indices work the same way as string indices:\n\n- any integer expression can be used as an index.\n- if you try to read or write an element that does not exist, you get an `indexerror`.\n- if an index has a negative value, it counts backward from the end of the list.\n\nthe `in` operator works on lists -- it checks whether a given element appears anywhere in the list.\n\n```python\n'edam' in cheeses        # returns true\n'wensleydale' in cheeses # returns false\n```\n\nalthough a list can contain another list, the nested list still counts as a single element.\n\n```python\nt = ['spam', 2.0, 5, [10, 20]]\nlen(t)  # returns 4\n10 in t # returns false\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "list_slices", "tags": ["slicing", "copying", "subsets"], "summary": "list slicing allows you to extract subsets of lists using the same syntax as string slicing.", "content": "the slice operator works on lists the same way it works on strings. the following example selects the second and third elements from a list of four letters.\n\n```python\nletters = ['a', 'b', 'c', 'd']\nletters[1:3]  # returns ['b', 'c']\n```\n\nif you omit the first index, the slice starts at the beginning.\n\n```python\nletters[:2]  # returns ['a', 'b']\n```\n\nif you omit the second, the slice goes to the end.\n\n```python\nletters[2:]  # returns ['c', 'd']\n```\n\nso if you omit both, the slice is a copy of the whole list.\n\n```python\nletters[:]  # returns ['a', 'b', 'c', 'd']\n```\n\nanother way to copy a list is to use the `list` function.\n\n```python\nlist(letters)  # returns ['a', 'b', 'c', 'd']\n```\n\nbecause `list` is the name of a built-in function, you should avoid using it as a variable name.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "list_operations", "tags": ["concatenation", "repetition", "mathematical operations"], "summary": "lists support concatenation with +, repetition with *, and mathematical operations with built-in functions.", "content": "the `+` operator concatenates lists.\n\n```python\nt1 = [1, 2]\nt2 = [3, 4]\nt1 + t2  # returns [1, 2, 3, 4]\n```\n\nthe `*` operator repeats a list a given number of times.\n\n```python\n['spam'] * 4  # returns ['spam', 'spam', 'spam', 'spam']\n```\n\nno other mathematical operators work with lists, but the built-in function `sum` adds up the elements.\n\n```python\nsum(t1)  # returns 3\n```\n\nand `min` and `max` find the smallest and largest elements.\n\n```python\nmin(t1)  # returns 1\nmax(t2)  # returns 4\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "list_methods", "tags": ["methods", "modification", "removal"], "summary": "python provides methods to modify lists, including adding elements with append and extend, and removing elements with pop and remove.", "content": "python provides methods that operate on lists. for example, `append` adds a new element to the end of a list:\n\n```python\nletters.append('e')\nletters  # returns ['a', 'b', 'c', 'd', 'e']\n```\n\n`extend` takes a list as an argument and appends all of the elements:\n\n```python\nletters.extend(['f', 'g'])\nletters  # returns ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n```\n\nthere are two methods that remove elements from a list. if you know the index of the element you want, you can use `pop`.\n\n```python\nt = ['a', 'b', 'c']\nt.pop(1)  # returns 'b'\nt         # returns ['a', 'c']\n```\n\nthe return value is the element that was removed.\n\nif you know the element you want to remove (but not the index), you can use `remove`:\n\n```python\nt = ['a', 'b', 'c']\nt.remove('b')  # returns none\nt              # returns ['a', 'c']\n```\n\nthe return value from `remove` is `none`. if the element you ask for is not in the list, that's a valueerror.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "lists_and_strings", "tags": ["conversion", "split", "join"], "summary": "strings can be converted to lists of characters or words, and lists of strings can be joined back into single strings.", "content": "a string is a sequence of characters and a list is a sequence of values, but a list of characters is not the same as a string. to convert from a string to a list of characters, you can use the `list` function.\n\n```python\ns = 'spam'\nt = list(s)\nt  # returns ['s', 'p', 'a', 'm']\n```\n\nthe `list` function breaks a string into individual letters. if you want to break a string into words, you can use the `split` method:\n\n```python\ns = 'pining for the fjords'\nt = s.split()\nt  # returns ['pining', 'for', 'the', 'fjords']\n```\n\nan optional argument called a **delimiter** specifies which characters to use as word boundaries. the following example uses a hyphen as a delimiter.\n\n```python\ns = 'ex-parrot'\nt = s.split('-')\nt  # returns ['ex', 'parrot']\n```\n\nif you have a list of strings, you can concatenate them into a single string using `join`. `join` is a string method, so you have to invoke it on the delimiter and pass the list as an argument.\n\n```python\ndelimiter = ' '\nt = ['pining', 'for', 'the', 'fjords']\ns = delimiter.join(t)\ns  # returns 'pining for the fjords'\n```\n\nin this case the delimiter is a space character, so `join` puts a space between words. to join strings without spaces, you can use the empty string, `''`, as a delimiter.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "looping_through_a_list", "tags": ["iteration", "for loop", "empty lists"], "summary": "for loops can iterate through list elements, and empty lists result in no iterations.", "content": "you can use a `for` statement to loop through the elements of a list.\n\n```python\nfor cheese in cheeses:\n    print(cheese)\n```\n\nfor example, after using `split` to make a list of words, we can use `for` to loop through them.\n\n```python\ns = 'pining for the fjords'\n\nfor word in s.split():\n    print(word)\n```\n\na `for` loop over an empty list never runs the indented statements.\n\n```python\nfor x in []:\n    print('this never happens.')\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "sorting_lists", "tags": ["sorting", "sorted", "immutability"], "summary": "the sorted function returns a new sorted list without modifying the original, and can be used with any sequence.", "content": "python provides a built-in function called `sorted` that sorts the elements of a list.\n\n```python\nscramble = ['c', 'a', 'b']\nsorted(scramble)  # returns ['a', 'b', 'c']\n```\n\nthe original list is unchanged.\n\n```python\nscramble  # returns ['c', 'a', 'b']\n```\n\n`sorted` works with any kind of sequence, not just lists. so we can sort the letters in a string like this.\n\n```python\nsorted('letters')  # returns ['e', 'e', 'l', 'r', 's', 't', 't']\n```\n\nthe result is a list. to convert the list to a string, we can use `join`.\n\n```python\n''.join(sorted('letters'))  # returns 'eelrstt'\n```\n\nwith an empty string as the delimiter, the elements of the list are joined with nothing between them.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "objects_and_values", "tags": ["identity", "equivalence", "references"], "summary": "variables can refer to the same object (identical) or different objects with the same value (equivalent).", "content": "if we run these assignment statements:\n\n```python\na = 'banana'\nb = 'banana'\n```\n\nwe know that `a` and `b` both refer to a string, but we don't know whether they refer to the *same* string. to check whether two variables refer to the same object, you can use the `is` operator.\n\n```python\na = 'banana'\nb = 'banana'\na is b  # returns true\n```\n\nin this example, python only created one string object, and both `a` and `b` refer to it. but when you create two lists, you get two objects.\n\n```python\na = [1, 2, 3]\nb = [1, 2, 3]\na is b  # returns false\n```\n\nin this case we would say that the two lists are **equivalent**, because they have the same elements, but not **identical**, because they are not the same object. if two objects are identical, they are also equivalent, but if they are equivalent, they are not necessarily identical.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "aliasing", "tags": ["aliasing", "references", "mutation"], "summary": "when multiple variables refer to the same mutable object, changes through one variable affect all references.", "content": "if `a` refers to an object and you assign `b = a`, then both variables refer to the same object.\n\n```python\na = [1, 2, 3]\nb = a\nb is a  # returns true\n```\n\nthe association of a variable with an object is called a **reference**. in this example, there are two references to the same object.\n\nan object with more than one reference has more than one name, so we say the object is **aliased**. if the aliased object is mutable, changes made with one name affect the other. in this example, if we change the object `b` refers to, we are also changing the object `a` refers to.\n\n```python\nb[0] = 5\na  # returns [5, 2, 3]\n```\n\nso we would say that `a` \"sees\" this change. although this behavior can be useful, it is error-prone. in general, it is safer to avoid aliasing when you are working with mutable objects.\n\nfor immutable objects like strings, aliasing is not as much of a problem.\n\n```python\na = 'banana'\nb = 'banana'\n```\n\nit almost never makes a difference whether `a` and `b` refer to the same string or not.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "list_arguments", "tags": ["functions", "parameters", "modification"], "summary": "when lists are passed to functions, the function receives a reference to the original list, allowing modification of the caller's data.", "content": "when you pass a list to a function, the function gets a reference to the list. if the function modifies the list, the caller sees the change. for example, `pop_first` uses the list method `pop` to remove the first element from a list.\n\n```python\ndef pop_first(lst):\n    return lst.pop(0)\n```\n\nwe can use it like this.\n\n```python\nletters = ['a', 'b', 'c']\npop_first(letters)  # returns 'a'\nletters             # returns ['b', 'c']\n```\n\nthe return value is the first element, which has been removed from the list.\n\nin this example, the parameter `lst` and the variable `letters` are aliases for the same object.\n\npassing a reference to an object as an argument to a function creates a form of aliasing. if the function modifies the object, those changes persist after the function is done.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "making_a_word_list", "tags": ["file processing", "efficiency", "word lists"], "summary": "reading words from a file into a list allows efficient searching and processing without repeated file access.", "content": "in the previous chapter, we read the file `words.txt` and searched for words with certain properties, like using the letter `e`. but we read the entire file many times, which is not efficient. it is better to read the file once and put the words in a list. the following loop shows how.\n\n```python\nword_list = []\n\nfor line in open('words.txt'):\n    word = line.strip()\n    word_list.append(word)\n\nlen(word_list)  # returns more than 113,000\n```\n\nbefore the loop, `word_list` is initialized with an empty list. each time through the loop, the `append` method adds a word to the end. when the loop is done, there are more than 113,000 words in the list.\n\nanother way to do the same thing is to use `read` to read the entire file into a string.\n\n```python\nstring = open('words.txt').read()\nlen(string)  # returns more than a million characters\n```\n\nthe result is a single string with more than a million characters. we can use the `split` method to split it into a list of words.\n\n```python\nword_list = string.split()\nlen(word_list)  # returns more than 113,000\n```\n\nnow, to check whether a string appears in the list, we can use the `in` operator. for example, `'demotic'` is in the list.\n\n```python\n'demotic' in word_list  # returns true\n```\n\nbut `'contrafibularities'` is not.\n\n```python\n'contrafibularities' in word_list  # returns false\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging_lists", "tags": ["debugging", "methods", "common errors"], "summary": "list methods modify the list in place and return none, unlike string methods that return new strings.", "content": "note that most list methods modify the argument and return `none`. this is the opposite of the string methods, which return a new string and leave the original alone.\n\nif you are used to writing string code like this:\n\n```python\nword = 'plumage!'\nword = word.strip('!')\nword  # returns 'plumage'\n```\n\nit is tempting to write list code like this:\n\n```python\nt = [1, 2, 3]\nt = t.remove(3)  # wrong!\n```\n\n`remove` modifies the list and returns `none`, so next operation you perform with `t` is likely to fail.\n\n```python\nt.remove(2)  # attributeerror: 'nonetype' object has no attribute 'remove'\n```\n\nthis error message takes some explaining. an **attribute** of an object is a variable or method associated with it. in this case, the value of `t` is `none`, which is a `nonetype` object, which does not have a attribute named `remove`, so the result is an `attributeerror`.\n\nif you see an error message like this, you should look backward through the program and see if you might have called a list method incorrectly.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "dictionaries_introduction", "tags": ["dictionary", "mapping", "key-value pairs"], "summary": "a dictionary is a mapping from keys to values, more general than lists as keys can be almost any type.", "content": "a **dictionary** is like a list, but more general. in a list, the indices have to be integers; in a dictionary they can be (almost) any type.\n\nwe create an empty dictionary using curly braces `{}`:\n\n```python\nnumbers = {}\n```\n\nto add items to the dictionary, we use square brackets:\n\n```python\nnumbers['zero'] = 0\n```\n\nthis assignment adds to the dictionary an **item**, which represents the association of a **key** and a **value**. in this example, the key is the string `'zero'` and the value is the integer `0`.\n\nwe can add more items and display the dictionary:\n\n```python\nnumbers['one'] = 1\nnumbers['two'] = 2\nnumbers  # returns {'zero': 0, 'one': 1, 'two': 2}\n```\n\nto look up a key and get the corresponding value, we use the bracket operator:\n\n```python\nnumbers['two']  # returns 2\n```\n\nif the key isn't in the dictionary, we get a `keyerror`.\n\nthe `len` function works on dictionaries; it returns the number of items.\n\nin mathematical language, a dictionary represents a **mapping** from keys to values, so you can also say that each key \"maps to\" a value.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "creating_dictionaries", "tags": ["dictionary creation", "dict function", "copying"], "summary": "dictionaries can be created using curly braces with key-value pairs or using the dict function.", "content": "instead of creating an empty dictionary and adding items one at a time, we can create the dictionary all at once:\n\n```python\nnumbers = {'zero': 0, 'one': 1, 'two': 2}\n```\n\neach item consists of a key and a value separated by a colon. the items are separated by commas and enclosed in curly braces.\n\nanother way to create a dictionary is to use the `dict` function. we can make an empty dictionary like this:\n\n```python\nempty = dict()\nempty  # returns {}\n```\n\nand we can make a copy of a dictionary like this:\n\n```python\nnumbers_copy = dict(numbers)\nnumbers_copy  # returns {'zero': 0, 'one': 1, 'two': 2}\n```\n\nit is often useful to make a copy before performing operations that modify dictionaries.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "the_in_operator_with_dictionaries", "tags": ["membership testing", "keys", "values"], "summary": "the in operator checks for key existence in dictionaries, and hash tables enable efficient lookups regardless of dictionary size.", "content": "the `in` operator works on dictionaries; it tells you whether something appears as a *key* in the dictionary.\n\n```python\n'one' in numbers  # returns true\n```\n\nthe `in` operator does *not* check whether something appears as a value:\n\n```python\n1 in numbers  # returns false\n```\n\nto see whether something appears as a value in a dictionary, you can use the method `values`, which returns a sequence of values, and then use the `in` operator:\n\n```python\n1 in numbers.values()  # returns true\n```\n\nthe items in a python dictionary are stored in a **hash table**, which is a way of organizing data that has a remarkable property: the `in` operator takes about the same amount of time no matter how many items are in the dictionary. that makes it possible to write some remarkably efficient algorithms.\n\nin general, the time it takes to find an element in a list is proportional to the length of the list. the time it takes to find a key in a dictionary is almost constant -- regardless of the number of items.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "a_collection_of_counters", "tags": ["counting", "frequency analysis", "value tracking"], "summary": "dictionaries can be used to count the frequency of elements by using keys to track elements and values to store counts.", "content": "suppose you are given a string and you want to count how many times each letter appears. a dictionary is a good tool for this job. we'll start with an empty dictionary:\n\n```python\ncounter = {}\n```\n\nas we loop through the letters in the string, we can add letters to the dictionary and increment their counts:\n\n```python\ncounter['a'] = 1  # first occurrence\ncounter['a'] += 1 # increment count\ncounter  # returns {'a': 2}\n```\n\nthe following function uses these features to count the number of times each letter appears in a string:\n\n```python\ndef value_counts(string):\n    counter = {}\n    for letter in string:\n        if letter not in counter:\n            counter[letter] = 1\n        else:\n            counter[letter] += 1\n    return counter\n```\n\neach time through the loop, if `letter` is not in the dictionary, we create a new item with key `letter` and value `1`. if `letter` is already in the dictionary we increment the value associated with `letter`.\n\nexample usage:\n\n```python\ncounter = value_counts('brontosaurus')\ncounter  # returns {'b': 1, 'r': 2, 'o': 2, 'n': 1, 't': 1, 's': 2, 'a': 1, 'u': 2}\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "looping_and_dictionaries", "tags": ["iteration", "keys", "values", "items"], "summary": "for loops can iterate through dictionary keys, and methods are available to access values and key-value pairs.", "content": "if you use a dictionary in a `for` statement, it traverses the keys of the dictionary. to demonstrate, let's make a dictionary that counts the letters in `'banana'`:\n\n```python\ncounter = value_counts('banana')\ncounter  # returns {'b': 1, 'a': 3, 'n': 2}\n```\n\nthe following loop prints the keys, which are the letters:\n\n```python\nfor key in counter:\n    print(key)\n```\n\nto print the values, we can use the `values` method:\n\n```python\nfor value in counter.values():\n    print(value)\n```\n\nto print the keys and values, we can loop through the keys and look up the corresponding values:\n\n```python\nfor key in counter:\n    value = counter[key]\n    print(key, value)\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "lists_and_dictionaries", "tags": ["nested data", "hashable", "immutable keys"], "summary": "lists can be values in dictionaries but not keys, as dictionary keys must be hashable and immutable.", "content": "you can put a list in a dictionary as a value. for example, here's a dictionary that maps from the number `4` to a list of four letters:\n\n```python\nd = {4: ['r', 'o', 'u', 's']}\nd  # returns {4: ['r', 'o', 'u', 's']}\n```\n\nbut you can't put a list in a dictionary as a key. dictionaries use hash tables, which means that the keys have to be **hashable**.\n\na **hash** is a function that takes a value (of any kind) and returns an integer. dictionaries use these integers, called hash values, to store and look up keys.\n\nthis system only works if a key is immutable, so its hash value is always the same. but if a key is mutable, its hash value could change, and the dictionary would not work. that's why keys have to be hashable, and why mutable types like lists aren't.\n\nsince dictionaries are mutable, they can't be used as keys, either. but they *can* be used as values.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "accumulating_a_list", "tags": ["accumulator", "filtering", "list building"], "summary": "lists can be built by accumulating elements that meet certain criteria during iteration.", "content": "for many programming tasks, it is useful to loop through one list or dictionary while building another. as an example, we can loop through words and make a list of palindromes:\n\n```python\ndef is_palindrome(word):\n    \"\"\"check if a word is a palindrome.\"\"\"\n    return reverse_word(word) == word\n\npalindromes = []\n\nfor word in word_dict:\n    if is_palindrome(word):\n        palindromes.append(word)\n\npalindromes[:10]  # returns first 10 palindromes\n```\n\nhere's how it works:\n\n* before the loop, `palindromes` is initialized with an empty list.\n* inside the loop, if `word` is a palindrome, we append it to the end of `palindromes`.\n* when the loop ends, `palindromes` is a list of palindromes.\n\nin this loop, `palindromes` is used as an **accumulator**, which is a variable that collects or accumulates data during a computation.\n\nnow suppose we want to select only palindromes with seven or more letters. we can loop through `palindromes` and make a new list that contains only long palindromes:\n\n```python\nlong_palindromes = []\n\nfor word in palindromes:\n    if len(word) >= 7:\n        long_palindromes.append(word)\n\nlong_palindromes  # returns list of long palindromes\n```\n\nlooping through a list like this, selecting some elements and omitting others, is called **filtering**.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "memos", "tags": ["memoization", "optimization", "recursion"], "summary": "memoization stores previously computed values to avoid redundant calculations in recursive functions.", "content": "if you ran the `fibonacci` function, you might notice that the bigger the argument, the longer the function takes to run. furthermore, the run time increases quickly.\n\none solution is to keep track of values that have already been computed by storing them in a dictionary. a previously computed value that is stored for later use is called a **memo**. here is a \"memoized\" version of `fibonacci`:\n\n```python\nknown = {0:0, 1:1}\n\ndef fibonacci_memo(n):\n    if n in known:\n        return known[n]\n\n    res = fibonacci_memo(n-1) + fibonacci_memo(n-2)\n    known[n] = res\n    return res\n```\n\n`known` is a dictionary that keeps track of the fibonacci numbers we already know. it starts with two items: `0` maps to `0` and `1` maps to `1`.\n\nwhenever `fibonacci_memo` is called, it checks `known`. if the result is already there, it can return immediately. otherwise it has to compute the new value, add it to the dictionary, and return it.\n\ncomparing the two functions, `fibonacci(40)` takes about 30 seconds to run. `fibonacci_memo(40)` takes about 30 microseconds, so it's a million times faster.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging_with_large_datasets", "tags": ["debugging", "scaling", "validation"], "summary": "strategies for debugging large datasets include scaling down input, checking summaries, writing self-checks, and formatting output.", "content": "as you work with bigger datasets it can become unwieldy to debug by printing and checking the output by hand. here are some suggestions for debugging large datasets:\n\n1. **scale down the input**: if possible, reduce the size of the dataset. for example if the program reads a text file, start with just the first 10 lines, or with the smallest example you can find. you can either edit the files themselves, or (better) modify the program so it reads only the first `n` lines.\n\n2. **check summaries and types**: instead of printing and checking the entire dataset, consider printing summaries of the data -- for example, the number of items in a dictionary or the total of a list of numbers. a common cause of runtime errors is a value that is not the right type. for debugging this kind of error, it is often enough to print the type of a value.\n\n3. **write self-checks**: sometimes you can write code to check for errors automatically. for example, if you are computing the average of a list of numbers, you could check that the result is not greater than the largest element in the list or less than the smallest. this is called a \"sanity check\" because it detects results that are \"insane\". another kind of check compares the results of two different computations to see if they are consistent. this is called a \"consistency check\".\n\n4. **format the output**: formatting debugging output can make it easier to spot an error. another tool you might find useful is the `pprint` module, which provides a `pprint` function that displays built-in types in a more human-readable format (`pprint` stands for \"pretty print\").", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "tuples_introduction", "tags": ["tuple", "immutable", "sequence"], "summary": "tuples are immutable sequences similar to lists, introduced for working with multiple data types together and supporting tuple assignment and variable-length arguments.", "content": "this chapter introduces one more built-in type, the tuple, and then shows how lists, dictionaries, and tuples work together. it also presents tuple assignment and a useful feature for functions with variable-length argument lists: the packing and unpacking operators.\n\none note: there are two ways to pronounce \"tuple\". some people say \"tuh-ple\", which rhymes with \"supple\". but in the context of programming, most people say \"too-ple\", which rhymes with \"quadruple\".", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "tuple_creation", "tags": ["tuple", "creation", "syntax"], "summary": "tuples can be created using comma-separated values, with or without parentheses, and using the tuple() constructor function.", "content": "a tuple is a sequence of values. the values can be any type, and they are indexed by integers, so tuples are a lot like lists. the important difference is that tuples are immutable.\n\nto create a tuple, you can write a comma-separated list of values:\n```python\nt = 'l', 'u', 'p', 'i', 'n'\n```\n\nalthough it is not necessary, it is common to enclose tuples in parentheses:\n```python\nt = ('l', 'u', 'p', 'i', 'n')\n```\n\nto create a tuple with a single element, you have to include a final comma:\n```python\nt1 = 'p',\n```\n\na single value in parentheses is not a tuple:\n```python\nt2 = ('p')  # this is a string, not a tuple\n```\n\nanother way to create a tuple is the built-in function `tuple`. with no argument, it creates an empty tuple:\n```python\nt = tuple()\n```\n\nif the argument is a sequence (string, list or tuple), the result is a tuple with the elements of the sequence:\n```python\nt = tuple('lupin')\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "tuple_operations", "tags": ["tuple", "operations", "indexing", "slicing"], "summary": "tuples support most list operations including indexing, slicing, concatenation, and repetition, but are immutable.", "content": "most list operators also work with tuples. for example, the bracket operator indexes an element:\n```python\nt[0]  # 'l'\n```\n\nand the slice operator selects a range of elements:\n```python\nt[1:3]  # ('u', 'p')\n```\n\nthe `+` operator concatenates tuples:\n```python\ntuple('lup') + ('i', 'n')  # ('l', 'u', 'p', 'i', 'n')\n```\n\nand the `*` operator duplicates a tuple a given number of times:\n```python\ntuple('spam') * 2  # ('s', 'p', 'a', 'm', 's', 'p', 'a', 'm')\n```\n\nthe `sorted` function works with tuples -- but the result is a list, not a tuple:\n```python\nsorted(t)  # ['i', 'l', 'n', 'p', 'u']\n```\n\nthe `reversed` function also works with tuples:\n```python\nreversed(t)  # returns a reversed object\n```\n\nwe can convert the reversed object to a tuple:\n```python\ntuple(reversed(t))  # ('n', 'i', 'p', 'u', 'l')\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "tuple_immutability", "tags": ["tuple", "immutable", "hashable"], "summary": "tuples are immutable and cannot be modified after creation, making them hashable and suitable for use as dictionary keys.", "content": "if you try to modify a tuple with the bracket operator, you get a `typeerror`:\n```python\n%%expect typeerror\nt[0] = 'l'\n```\n\nand tuples don't have any of the methods that modify lists, like `append` and `remove`:\n```python\n%%expect attributeerror\nt.remove('l')\n```\n\nbecause tuples are immutable, they are hashable, which means they can be used as keys in a dictionary:\n```python\nd = {}\nd[1, 2] = 3\nd[3, 4] = 7\n```\n\nwe can look up a tuple in a dictionary like this:\n```python\nd[1, 2]  # 3\n```\n\nor if we have a variable that refers to a tuple, we can use it as a key:\n```python\nt = (3, 4)\nd[t]  # 7\n```\n\ntuples can also appear as values in a dictionary:\n```python\nt = tuple('abc')\nd = {'key': t}\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "tuple_assignment", "tags": ["tuple", "assignment", "unpacking"], "summary": "tuple assignment allows multiple variables to be assigned values from a tuple in a single statement, useful for swapping values and iterating through dictionary items.", "content": "you can put a tuple of variables on the left side of an assignment, and a tuple of values on the right:\n```python\na, b = 1, 2\n```\n\nthe values are assigned to the variables from left to right -- in this example, `a` gets the value `1` and `b` gets the value `2`.\n\nmore generally, if the left side of an assignment is a tuple, the right side can be any kind of sequence -- string, list or tuple. for example, to split an email address into a user name and a domain:\n```python\nemail = 'monty@python.org'\nusername, domain = email.split('@')\n```\n\nthe number of variables on the left and the number of values on the right have to be the same -- otherwise you get a `valueerror`.\n\ntuple assignment is useful if you want to swap the values of two variables:\n```python\na, b = b, a\n```\n\nthis works because all of the expressions on the right side are evaluated before any of the assignments.\n\nwe can also use tuple assignment in a `for` statement. for example, to loop through the items in a dictionary:\n```python\nd = {'one': 1, 'two': 2}\n\nfor item in d.items():\n    key, value = item\n    print(key, '->', value)\n```\n\nwe can write this loop more concisely:\n```python\nfor key, value in d.items():\n    print(key, '->', value)\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "tuples_as_return_values", "tags": ["tuple", "return", "multiple values"], "summary": "functions can return tuples to effectively return multiple values, which can then be unpacked using tuple assignment.", "content": "strictly speaking, a function can only return one value, but if the value is a tuple, the effect is the same as returning multiple values. for example, the built-in function `divmod` takes two arguments and returns a tuple of two values, the quotient and remainder:\n```python\ndivmod(7, 3)  # (2, 1)\n```\n\nwe can use tuple assignment to store the elements of the tuple in two variables:\n```python\nquotient, remainder = divmod(7, 3)\n```\n\nhere is an example of a function that returns a tuple:\n```python\ndef min_max(t):\n    return min(t), max(t)\n```\n\n`max` and `min` are built-in functions that find the largest and smallest elements of a sequence. `min_max` computes both and returns a tuple of two values:\n```python\nmin_max([2, 4, 1, 3])  # (1, 4)\n```\n\nwe can assign the results to variables like this:\n```python\nlow, high = min_max([2, 4, 1, 3])\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "argument_packing_and_unpacking", "tags": ["tuple", "packing", "unpacking", "variable arguments"], "summary": "the * operator can pack multiple arguments into a tuple or unpack a tuple into multiple function arguments.", "content": "functions can take a variable number of arguments. a parameter name that begins with the `*` operator **packs** arguments into a tuple:\n```python\ndef mean(*args):\n    return sum(args) / len(args)\n```\n\nthe parameter can have any name you like, but `args` is conventional.\n\nif you have a sequence of values and you want to pass them to a function as multiple arguments, you can use the `*` operator to **unpack** the tuple:\n```python\nt = (7, 3)\ndivmod(*t)  # equivalent to divmod(7, 3)\n```\n\npacking and unpacking can be useful if you want to adapt the behavior of an existing function. for example, this function takes any number of arguments, removes the lowest and highest, and computes the mean of the rest:\n```python\ndef trimmed_mean(*args):\n    low, high = min_max(args)\n    trimmed = list(args)\n    trimmed.remove(low)\n    trimmed.remove(high)\n    return mean(*trimmed)\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "zip_function", "tags": ["tuple", "zip", "iteration", "pairing"], "summary": "the zip function pairs elements from multiple sequences into tuples, useful for iterating through corresponding elements.", "content": "tuples are useful for looping through the elements of two sequences and performing operations on corresponding elements. we can use `zip`, which is a built-in function that takes two or more sequences and returns a **zip object**, so-called because it pairs up the elements of the sequences like the teeth of a zipper.\n\nwe can use the zip object to loop through the values in the sequences pairwise:\n```python\nscores1 = [1, 2, 4, 5, 1, 5, 2]\nscores2 = [5, 5, 2, 2, 5, 2, 3]\n\nfor pair in zip(scores1, scores2):\n    print(pair)\n```\n\neach time through the loop, `pair` gets assigned a tuple of scores. so we can assign the scores to variables:\n```python\nwins = 0\nfor team1, team2 in zip(scores1, scores2):\n    if team1 > team2:\n        wins += 1\n```\n\nif you have two lists and you want a list of pairs, you can use `zip` and `list`:\n```python\nt = list(zip(scores1, scores2))\n```\n\nif you have a list of keys and a list of values, you can use `zip` and `dict` to make a dictionary:\n```python\nletters = 'abcdefghijklmnopqrstuvwxyz'\nnumbers = range(len(letters))\nletter_map = dict(zip(letters, numbers))\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "enumerate_function", "tags": ["tuple", "enumerate", "iteration", "index"], "summary": "the enumerate function returns tuples containing indices and elements from a sequence, useful for looping with indices.", "content": "if you need to loop through the elements of a sequence and their indices, you can use the built-in function `enumerate`:\n```python\nenumerate('abc')\n```\n\nthe result is an **enumerate object** that loops through a sequence of pairs, where each pair contains an index (starting from 0) and an element from the given sequence:\n```python\nfor index, element in enumerate('abc'):\n    print(index, element)\n```\n\nthis would output:\n```\n0 a\n1 b\n2 c\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "tuple_comparison_and_sorting", "tags": ["tuple", "comparison", "sorting", "key"], "summary": "tuples can be compared lexicographically and sorted using custom key functions to determine sort order.", "content": "the relational operators work with tuples and other sequences. for example, if you use the `<` operator with tuples, it starts by comparing the first element from each sequence. if they are equal, it goes on to the next pair of elements, and so on, until it finds a pair that differ:\n```python\n(0, 1, 2) < (0, 3, 4)  # true\n```\n\nsubsequent elements are not considered -- even if they are really big:\n```python\n(0, 1, 2000000) < (0, 3, 4)  # true\n```\n\nthis way of comparing tuples is useful for sorting a list of tuples, or finding the minimum or maximum. to sort by a specific element, we can use a key function:\n```python\ndef second_element(t):\n    return t[1]\n\nsorted_items = sorted(items, key=second_element)\n```\n\nthe sort key determines the order of the items in the list. we can also use `max` with a key function:\n```python\nmax(items, key=second_element)\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "inverting_dictionaries_with_tuples", "tags": ["tuple", "dictionary", "inversion", "data structure"], "summary": "dictionaries can be inverted using tuples and lists to handle non-unique values, creating mappings from values to lists of keys.", "content": "suppose you want to invert a dictionary so you can look up a value and get the corresponding key. but there's a problem -- the keys in a dictionary have to be unique, but the values don't. so one way to invert a dictionary is to create a new dictionary where the values are lists of keys from the original.\n\nthe following function takes a dictionary and returns its inverse as a new dictionary:\n```python\ndef invert_dict(d):\n    new = {}\n    for key, value in d.items():\n        if value not in new:\n            new[value] = [key]\n        else:\n            new[value].append(key)\n    return new\n```\n\nthe `for` statement loops through the keys and values in `d`. if the value is not already in the new dictionary, it is added and associated with a list that contains a single element. otherwise it is appended to the existing list.\n\nthis is the first example we've seen where the values in the dictionary are lists.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "data_structure_debugging", "tags": ["tuple", "data structure", "debugging", "structshape"], "summary": "the structshape module helps debug complex data structures by summarizing their structure in a readable format.", "content": "lists, dictionaries and tuples are **data structures**. in this chapter we are starting to see compound data structures, like lists of tuples, or dictionaries that contain tuples as keys and lists as values. compound data structures are useful, but they are prone to errors caused when a data structure has the wrong type, size, or structure.\n\nto help debug these kinds of errors, i wrote a module called `structshape` that provides a function, also called `structshape`, that takes any kind of data structure as an argument and returns a string that summarizes its structure.\n\nexamples:\n```python\nfrom structshape import structshape\n\nt = [1, 2, 3]\nstructshape(t)  # 'list of 3 int'\n\nt2 = [[1,2], [3,4], [5,6]]\nstructshape(t2)  # 'list of 3 list of 2 int'\n\nt3 = [1, 2, 3, 4.0, '5', '6', [7], [8], 9]\nstructshape(t3)  # 'list of (3 int, float, 2 str, 2 list of int, int)'\n```\n\nif you are having trouble keeping track of your data structures, `structshape` can help.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "tuple_glossary", "tags": ["tuple", "glossary", "definitions"], "summary": "key terms related to tuples including packing, unpacking, zip objects, enumerate objects, sort keys, and data structures.", "content": "**pack:** collect multiple arguments into a tuple.\n\n**unpack:** treat a tuple (or other sequence) as multiple arguments.\n\n**zip object:** the result of calling the built-in function `zip`, can be used to loop through a sequence of tuples.\n\n**enumerate object:** the result of calling the built-in function `enumerate`, can be used to loop through a sequence of tuples.\n\n**sort key:** a value, or function that computes a value, used to sort the elements of a collection.\n\n**data structure:** a collection of values, organized to perform certain operations efficiently.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "text_analysis_and_generation_introduction", "tags": ["text analysis", "markov generation", "LLM"], "summary": "introduction to text analysis and markov generation techniques for exploring statistical relationships between words and generating new text similar to the original.", "content": "at this point we have covered python's core data structures -- lists, dictionaries, and tuples -- and some algorithms that use them. in this chapter, we'll use them to explore text analysis and markov generation:\n\n* text analysis is a way to describe the statistical relationships between the words in a document, like the probability that one word is followed by another, and\n\n* markov generation is a way to generate new text with words and phrases similar to the original text.\n\nthese algorithms are similar to parts of a large language model (llm), which is the key component of a chatbot.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "unique_words_analysis", "tags": ["text processing", "unique words", "dictionary"], "summary": "analyzing unique words in text by reading files, splitting lines into words, and storing them as dictionary keys to count distinct vocabulary.", "content": "as a first step toward text analysis, let's read a book and count the number of unique words. we'll use a `for` loop to read lines from the file and `split` to divide the lines into words. then, to keep track of unique words, we'll store each word as a key in a dictionary:\n\n```python\nunique_words = {}\nfor line in open(filename):\n    seq = line.split()\n    for word in seq:\n        unique_words[word] = 1\n\nlen(unique_words)\n```\n\nthe length of the dictionary is the number of unique words. we can inspect the longest words using `sorted` with the `len` function as a keyword argument:\n\n```python\nsorted(unique_words, key=len)[-5:]\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "text_cleaning_and_punctuation_handling", "tags": ["text cleaning", "punctuation", "unicode"], "summary": "techniques for cleaning text by handling dashes, removing punctuation using unicode categories, and normalizing words to lowercase.", "content": "to identify the words in the text, we need to deal with two issues:\n\n* when a dash appears in a line, we should replace it with a space -- then when we use `split`, the words will be separated.\n\n* after splitting the words, we can use `strip` to remove punctuation.\n\nto handle the first issue, we can use the following function:\n```python\ndef split_line(line):\n    return line.replace('\u0432\u0452\u201d', ' ').split()\n```\n\nto remove punctuation, we can use the `unicodedata` module to identify punctuation characters:\n```python\nimport unicodedata\n\npunc_marks = {}\nfor line in open(filename):\n    for char in line:\n        category = unicodedata.category(char)\n        if category.startswith('p'):\n            punc_marks[char] = 1\n\npunctuation = ''.join(punc_marks)\n```\n\nnow we can write a function that cleans words:\n```python\ndef clean_word(word):\n    return word.strip(punctuation).lower()\n```\n\nthis approach leaves hyphenated words alone while removing punctuation from the beginning and end.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "word_frequency_counting", "tags": ["frequency counting", "dictionary", "sorting"], "summary": "counting word frequencies using dictionaries and sorting results to find the most common words in a text.", "content": "the following loop computes the frequency of each unique word:\n```python\nword_counter = {}\nfor line in open(filename):\n    for word in split_line(line):\n        word = clean_word(word)\n        if word not in word_counter:\n            word_counter[word] = 1\n        else:\n            word_counter[word] += 1\n```\n\nthe first time we see a word, we initialize its frequency to `1`. if we see the same word again later, we increment its frequency.\n\nto see which words appear most often, we can use `items` to get the key-value pairs from `word_counter`, and sort them by frequency:\n```python\ndef second_element(t):\n    return t[1]\n\nitems = sorted(word_counter.items(), key=second_element, reverse=true)\n```\n\nwe can then display the most frequent words.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "optional_parameters", "tags": ["functions", "parameters", "default values"], "summary": "using optional parameters with default values to create flexible functions that can be called with different numbers of arguments.", "content": "we can write functions with optional parameters. for example, the following function takes two parameters, `word_counter` and `num`:\n```python\ndef print_most_common(word_counter, num=5):\n    items = sorted(word_counter.items(), key=second_element, reverse=true)\n\n    for word, freq in items[:num]:\n        print(freq, word, sep='\\t')\n```\n\nthe second parameter looks like an assignment statement, but it's not -- it's an optional parameter.\n\nif you call this function with one argument, `num` gets the **default value**, which is `5`:\n```python\nprint_most_common(word_counter)\n```\n\nif you call this function with two arguments, the second argument gets assigned to `num` instead of the default value:\n```python\nprint_most_common(word_counter, 3)\n```\n\nin that case, we would say the optional argument **overrides** the default value.\n\nif a function has both required and optional parameters, all of the required parameters have to come first, followed by the optional ones.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "dictionary_subtraction", "tags": ["dictionary", "set operations", "spell checking"], "summary": "using dictionary operations to find differences between sets of words, useful for spell checking and vocabulary analysis.", "content": "suppose we want to spell-check a book -- that is, find a list of words that might be misspelled. one way to do that is to find words in the book that don't appear in a list of valid words.\n\nwe can think of this problem as set subtraction -- that is, we want to find all the words from one set (the words in the book) that are not in the other (the words in the list).\n\nthe following function takes two dictionaries as parameters and returns a new dictionary that contains all the keys from one that are not in the other:\n```python\ndef subtract(d1, d2):\n    res = {}\n    for key in d1:\n        if key not in d2:\n            res[key] = d1[key]\n    return res\n```\n\nhere's how we use it:\n```python\ndiff = subtract(word_counter, valid_words)\n```\n\nwe can then analyze the words that appear in the book but not in the valid word list to identify potential misspellings.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "random_number_generation", "tags": ["random", "probability", "weighted selection"], "summary": "using python's random module for pseudorandom number generation and weighted selection of elements based on frequency.", "content": "given the same inputs, most computer programs are **deterministic**, which means they generate the same outputs every time. for some applications, though, we want the computer to be unpredictable.\n\nmaking a program truly nondeterministic turns out to be difficult, but there are ways to fake it. one is to use algorithms that generate **pseudorandom** numbers. pseudorandom numbers are not truly random because they are generated by a deterministic computation, but just by looking at the numbers it is all but impossible to distinguish them from random.\n\nthe `random` module provides functions that generate pseudorandom numbers. we can import it like this:\n```python\nimport random\n```\n\nthe `random` module provides a function called `choice` that chooses an element from a list at random, with every element having the same probability of being chosen:\n```python\nt = [1, 2, 3]\nrandom.choice(t)\n```\n\nif we want to choose words with different \"weights\", so that some are chosen more often than others, we can use the `choices` function with weights:\n```python\nwords = list(word_counter)\nweights = word_counter.values()\nrandom_words = random.choices(words, weights=weights, k=6)\n```\n\nthe result is a list of strings that we can join into something that's looks more like a sentence.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "bigrams_and_n_grams", "tags": ["bigrams", "n-grams", "text analysis"], "summary": "analyzing sequences of words (bigrams, trigrams, n-grams) to understand relationships between consecutive words in text.", "content": "instead of looking at one word at a time, now we'll look at sequences of two words, which are called **bigrams**. a sequence of three words is called a **trigram**, and a sequence with some unspecified number of words is called an **n-gram**.\n\nlet's write a program that finds all of the bigrams in the book and the number of times each one appears. to store the results, we'll use a dictionary where:\n\n* the keys are tuples of strings that represent bigrams, and\n* the values are integers that represent frequencies.\n\nthe following function takes a list of two strings as a parameter and counts the bigram:\n```python\ndef count_bigram(bigram):\n    key = tuple(bigram)\n    if key not in bigram_counter:\n        bigram_counter[key] = 1\n    else:\n        bigram_counter[key] += 1\n```\n\nto keep track of pairs of consecutive words, we'll use a list called `window`:\n```python\ndef process_word(word):\n    window.append(word)\n\n    if len(window) == 2:\n        count_bigram(window)\n        window.pop(0)\n```\n\nthis approach slides a window over the text, processing each pair of consecutive words as a bigram.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "markov_analysis", "tags": ["markov chain", "successor mapping", "text generation"], "summary": "using markov chain analysis to map each word to its possible successors, enabling text generation that preserves the statistical relationships of the original text.", "content": "we can do better with markov chain text analysis, which computes, for each word in a text, the list of words that come next. to store the results, we'll use a dictionary that maps from each word to the list of words that follow it.\n\nthe following function encapsulates the process of adding bigrams to the successor map:\n```python\ndef add_bigram(bigram):\n    first, second = bigram\n\n    if first not in successor_map:\n        successor_map[first] = [second]\n    else:\n        successor_map[first].append(second)\n```\n\nif the same bigram appears more that once, the second word is added to the list more than once. in this way, `successor_map` keeps track of how many times each successor appears.\n\nwe use a similar window-based approach to process the text:\n```python\ndef process_word_bigram(word):\n    window.append(word)\n\n    if len(window) == 2:\n        add_bigram(window)\n        window.pop(0)\n```\n\nthis analysis creates a mapping that shows which words can follow each word in the original text.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "markov_text_generation", "tags": ["text generation", "markov chain", "random walk"], "summary": "generating new text using markov chain analysis by starting with a word and repeatedly choosing random successors based on the original text's patterns.", "content": "we can use the results from markov analysis to generate new text with the same relationships between consecutive words as in the original. here's how it works:\n\n* starting with any word that appears in the text, we look up its possible successors and choose one at random.\n* then, using the chosen word, we look up its possible successors, and choose one at random.\n\nwe can repeat this process to generate as many words as we want. here's an example:\n```python\nword = 'although'\nsuccessors = successor_map[word]\nword = random.choice(successors)\n```\n\nif the same word appears more than once in the list, it is more likely to be selected.\n\nrepeating these steps, we can use a loop to generate a longer series:\n```python\nfor i in range(10):\n    successors = successor_map[word]\n    word = random.choice(successors)\n    print(word, end=' ')\n```\n\nthe result sounds more like a real sentence, but it still doesn't make much sense. we can do better using more than one word as a key in `successor_map`.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging_strategies", "tags": ["debugging", "problem solving", "rubber duck"], "summary": "comprehensive debugging strategies including reading code, running experiments, thinking systematically, and using rubber duck debugging.", "content": "at this point we are writing more substantial programs, and you might find that you are spending more time debugging. if you are stuck on a difficult bug, here are a few things to try:\n\n* **reading**: examine your code, read it back to yourself, and check that it says what you meant to say.\n\n* **running**: experiment by making changes and running different versions. often if you display the right thing at the right place in the program, the problem becomes obvious.\n\n* **ruminating**: take some time to think! what kind of error is it: syntax, runtime, or semantic? what information can you get from the error messages?\n\n* **rubberducking**: if you explain the problem to someone else, you sometimes find the answer before you finish asking the question. often you don't need the other person; you could just talk to a rubber duck. this is called **rubber duck debugging**.\n\n* **retreating**: at some point, the best thing to do is back up -- undoing recent changes -- until you get to a program that works.\n\n* **resting**: if you give your brain a break, sometime it will find the problem for you.\n\nfinding a hard bug requires reading, running, ruminating, retreating, and sometimes resting. if you get stuck on one of these activities, try the others.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "text_analysis_glossary", "tags": ["glossary", "definitions", "terminology"], "summary": "key terms related to text analysis, markov chains, and debugging techniques.", "content": "**default value:** the value assigned to a parameter if no argument is provided.\n\n**override:** to replace a default value with an argument.\n\n**deterministic:** a deterministic program does the same thing each time it runs, given the same inputs.\n\n**pseudorandom:** a pseudorandom sequence of numbers appears to be random, but is generated by a deterministic program.\n\n**bigram:** a sequence of two elements, often words.\n\n**trigram:** a sequence of three elements.\n\n**n-gram:** a sequence of an unspecified number of elements.\n\n**rubber duck debugging:** a way of debugging by explaining a problem aloud to an inanimate object.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "files_and_databases", "tags": ["persistent", "ephemeral", "files", "databases"], "summary": "comparison between ephemeral programs that run briefly and lose data, and persistent programs that run long-term and store data in files or databases.", "content": "most of the programs we have seen so far are **ephemeral** in the sense that they run for a short time and produce output, but when they end, their data disappears. each time you run an ephemeral program, it starts with a clean slate.\n\nother programs are **persistent**: they run for a long time (or all the time); they keep at least some of their data in long-term storage; and if they shut down and restart, they pick up where they left off.\n\na simple way for programs to maintain their data is by reading and writing text files. a more versatile alternative is to store data in a database. databases are specialized files that can be read and written more efficiently than text files, and they provide additional capabilities.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "filenames_and_paths", "tags": ["directories", "paths", "os module", "file system"], "summary": "working with file names, directories, and paths using the os module, including relative and absolute paths.", "content": "files are organized into **directories**, also called \"folders\". every running program has a **current working directory**, which is the default directory for most operations. for example, when you open a file, python looks for it in the current working directory.\n\nthe `os` module provides functions for working with files and directories (\"os\" stands for \"operating system\"). it provides a function called `getcwd` that gets the name of the current working directory.\n\na string like `'/home/dinsdale'` that identifies a file or directory is called a **path**. a simple filename like `'memo.txt'` is also considered a path, but it is a **relative path** because it specifies a file name relative to the current directory. a path that begins with `/` does not depend on the current directory -- it is called an **absolute path**.\n\nkey functions:\n- `os.getcwd()` - gets current working directory\n- `os.path.abspath('memo.txt')` - gets absolute path\n- `os.listdir('photos')` - lists directory contents\n- `os.path.exists('photos')` - checks if path exists\n- `os.path.isdir('photos')` - checks if path is directory\n- `os.path.isfile('photos/notes.txt')` - checks if path is file\n- `os.path.join('photos', 'jan-2023', 'photo1.jpg')` - joins paths with correct separator", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "f_strings", "tags": ["string formatting", "f-strings", "output"], "summary": "using f-strings to format strings with embedded expressions for writing data to files.", "content": "one way for programs to store data is to write it to a text file. to write a combination of strings and other values, we can use an **f-string**, which is a string that has the letter `f` before the opening quotation mark, and contains one or more python expressions in curly braces.\n\nexamples:\n```python\nf'i have spotted {num_camels} camels'\nf'in {num_years} years i have spotted {num_camels} camels'\nline = f'in {round(num_years * 12)} months i have spotted {num_camels} camels'\n```\n\nthe result is a string where the expression has been evaluated and replaced with the result. there can be more than one expression, and the expressions can contain operators and function calls.\n\nin an f-string, an expression in curly brace is converted to a string, so you can include lists, dictionaries, and other types.\n\nif a f-string contains an invalid expression, the result is an error.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "yaml", "tags": ["serialization", "configuration", "YAML", "data storage"], "summary": "using yaml format for storing configuration data and serializing python objects.", "content": "one of the reasons programs read and write files is to store **configuration data**, which is information that specifies what the program should do and how.\n\nthe `yaml` module provides functions to work with yaml files, which are text files formatted to be easy for humans *and* programs to read and write.\n\nexample usage:\n```python\nimport yaml\n\nconfig_filename = 'config.yaml'\nwriter = open(config_filename, 'w')\nyaml.dump(config, writer)\nwriter.close()\n\n# reading back\nreader = open(config_filename)\nconfig_readback = yaml.safe_load(reader)\n```\n\nconverting an object like a dictionary to a string is called **serialization**. converting the string back to an object is called **deserialization**. if you serialize and then deserialize an object, the result should be equivalent to the original.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "shelve_module", "tags": ["databases", "key-value stores", "shelve", "persistent storage"], "summary": "using the shelve module to create and work with key-value store databases.", "content": "a **database** is a file that is organized for storing data. some databases are organized like a table with rows and columns of information. others are organized like a dictionary that maps from keys to values; they are sometimes called **key-value stores**.\n\nthe `shelve` module provides functions for creating and updating a key-value store called a \"shelf\".\n\nexample usage:\n```python\nimport shelve\n\ndb_file = os.path.join(config['data_dir'], 'captions')\ndb = shelve.open(db_file, 'c')\n\n# adding items\nkey = 'jan-2023/photo1.jpg'\ndb[key] = 'cat nose'\n\n# retrieving items\nvalue = db[key]\n\n# dictionary-like operations\nlist(db.keys())\nlist(db.values())\nkey in db\n\nfor key in db:\n    print(key, ':', db[key])\n\ndb.close()\n```\n\nthe shelf object behaves in many ways like a dictionary. some dictionary methods, like `keys`, `values` and `items`, also work with shelf objects.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "storing_data_structures_in_shelve", "tags": ["shelve", "data structures", "persistent storage"], "summary": "storing complex data structures like lists and dictionaries in shelve databases.", "content": "in the previous example, the keys and values in the shelf are strings. but we can also use a shelf to contain data structures like lists and dictionaries.\n\nimportant note: when working with mutable objects in shelve, you must read the value, update it, and write it back to the shelf:\n\n```python\n# incorrect - this won't update the shelf\ndb[key].append(word)\n\n# correct - read, update, write back\nanagram_list = db[key]\nanagram_list.append(word)\ndb[key] = anagram_list\n```\n\nthe problem is that when we look up the key, we get a list of strings, but if we modify the list of strings, it does not affect the shelf. if we want to update the shelf, we have to read the old value, update it, and then write the new value back to the shelf.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "checking_for_equivalent_files", "tags": ["file comparison", "binary mode", "hashing", "md5"], "summary": "methods for comparing file contents including direct comparison and using hash functions.", "content": "one way to check if files contain the same data is to read the contents of both files and compare.\n\nif the files contain images, we have to open them with mode `'rb'`, where `'r'` means we want to read the contents and `'b'` indicates **binary mode**. in binary mode, the contents are not interpreted as text -- they are treated as a sequence of bytes.\n\nexample:\n```python\npath1 = 'photos/jan-2023/photo1.jpg'\ndata1 = open(path1, 'rb').read()\n# data1 is a bytes object\n```\n\nan alternative is to use a **hash function**, which takes the contents of a file and computes a **digest**, which is usually a large integer. if two files contain the same data, they will have the same digest. if two files differ, they will *almost always* have different digests.\n\nthe `hashlib` module provides several hash functions - the one we'll use is called `md5`.\n\nexample:\n```python\nimport hashlib\n\ndef md5_digest(filename):\n    data = open(filename, 'rb').read()\n    md5_hash = hashlib.md5()\n    md5_hash.update(data)\n    digest = md5_hash.hexdigest()\n    return digest\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "walking_directories", "tags": ["directory traversal", "recursion", "file system"], "summary": "recursively traversing directories to find and process files.", "content": "the following function takes as an argument the directory we want to search. it uses `listdir` to loop through the contents of the directory. when it finds a file, it prints its complete path. when it finds a directory, it calls itself recursively to search the subdirectory.\n\n```python\ndef walk(dirname):\n    for name in os.listdir(dirname):\n        path = os.path.join(dirname, name)\n\n        if os.path.isfile(path):\n            print(path)\n        elif os.path.isdir(path):\n            walk(path)\n```\n\nthe order of the results depends on details of the operating system.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging_file_operations", "tags": ["debugging", "whitespace", "file handling"], "summary": "techniques for debugging file operations, particularly issues with whitespace and cross-platform compatibility.", "content": "when you are reading and writing files, you might run into problems with whitespace. these errors can be hard to debug because whitespace characters are normally invisible.\n\nthe built-in function `repr` can help. it takes any object as an argument and returns a string representation of the object. for strings, it represents whitespace characters with backslash sequences.\n\nexample:\n```python\ns = '1 2\\t 3\\n 4'\nprint(s)  # shows: 1 2  3\n          # 4\nprint(repr(s))  # shows: '1 2\\t 3\\n 4'\n```\n\none other problem you might run into is that different systems use different characters to indicate the end of a line. some systems use a newline, represented `\\n`. others use a return character, represented `\\r`. some use both.\n\nfile name capitalization is another issue you might encounter if you work with different operating systems. in macos and unix, file names can contain lowercase and uppercase letters, digits, and most symbols. but many windows applications ignore the difference between lowercase and uppercase letters, and several symbols that are allowed in macos and unix are not allowed in windows.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "object_oriented_programming_introduction", "tags": ["OOP", "classes", "objects", "programming paradigms"], "summary": "introduction to object-oriented programming using programmer-defined types to organize both code and data.", "content": "at this point you know how to use functions to organize code and how to use built-in types to organize data. the next step is **object-oriented programming**, which uses programmer-defined types to organize both code and data.\n\nobject-oriented programming is a big topic, so we will proceed gradually. in this chapter, we'll start with code that is not idiomatic -- that is, it is not the kind of code experienced programmers write -- but it is a good place to start. in the next two chapters, we will use additional features to write more idiomatic code.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "programmer_defined_types", "tags": ["classes", "class objects", "instantiation", "instances"], "summary": "creating custom types using classes, class objects, and instantiating objects from classes.", "content": "we have used many of python's built-in types -- now we will define a new type. as a first example, we'll create a type called `time` that represents a time of day. a programmer-defined type is also called a **class**. a class definition looks like this:\n\n```python\nclass time:\n    \"\"\"represents a time of day.\"\"\"\n```\n\nthe header indicates that the new class is called `time`. the body is a docstring that explains what the class is for. defining a class creates a **class object**.\n\nthe class object is like a factory for creating objects. to create a `time` object, you call `time` as if it were a function.\n\n```python\nlunch = time()\n```\n\nthe result is a new object whose type is `__main__.time`, where `__main__` is the name of the module where `time` is defined.\n\nwhen you print an object, python tells you what type it is and where it is stored in memory (the prefix `0x` means that the following number is in hexadecimal).\n\ncreating a new object is called **instantiation**, and the object is an **instance** of the class.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "attributes", "tags": ["attributes", "dot notation", "object diagram"], "summary": "adding variables to objects using attributes and accessing them with dot notation.", "content": "an object can contain variables, which are called **attributes** and pronounced with the emphasis on the first syllable, like \"at-trib-ute\", rather than the second syllable, like \"a-trib-ute\". we can create attributes using dot notation.\n\n```python\nlunch.hour = 11\nlunch.minute = 59\nlunch.second = 1\n```\n\nthis example creates attributes called `hour`, `minute`, and `second`, which contain the hours, minutes, and seconds of the time `11:59:01`.\n\nthe variable `lunch` refers to a `time` object, which contains three attributes. each attribute refers to an integer. a state diagram like this -- which shows an object and its attributes -- is called an **object diagram**.\n\nyou can read the value of an attribute using the dot operator.\n\n```python\nlunch.hour\n```\n\nyou can use an attribute as part of any expression.\n\n```python\ntotal_minutes = lunch.hour * 60 + lunch.minute\n```\n\nand you can use the dot operator in an expression in an f-string.\n\n```python\nf'{lunch.hour}:{lunch.minute}:{lunch.second}'\n```\n\nto fix formatting issues, we can use **format specifiers** in f-strings:\n\n```python\nf'{lunch.hour}:{lunch.minute:02d}:{lunch.second:02d}'\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "objects_as_return_values", "tags": ["functions", "return values", "object creation"], "summary": "creating functions that return objects and using them to create new instances.", "content": "functions can return objects. for example, `make_time` takes parameters called `hour`, `minute`, and `second`, stores them as attributes in a `time` object, and returns the new object.\n\n```python\ndef make_time(hour, minute, second):\n    time = time()\n    time.hour = hour\n    time.minute = minute\n    time.second = second\n    return time\n```\n\nit might be surprising that the parameters have the same names as the attributes, but that's a common way to write a function like this. here's how we use `make_time` to create a `time` object.\n\n```python\ntime = make_time(11, 59, 1)\nprint_time(time)\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "objects_are_mutable", "tags": ["mutability", "modifying objects", "side effects"], "summary": "understanding that objects can be modified after creation and the implications of mutability.", "content": "suppose you are going to a screening of a movie, like *monty python and the holy grail*, which starts at `9:20 pm` and runs for `92` minutes, which is one hour `32` minutes. what time will the movie end?\n\nfirst, we'll create a `time` object that represents the start time.\n\n```python\nstart = make_time(9, 20, 0)\n```\n\nto find the end time, we can modify the attributes of the `time` object, adding the duration of the movie.\n\n```python\nstart.hour += 1\nstart.minute += 32\n```\n\ninside functions, when an object is passed as an argument, modifications to the object affect the original object since the parameter is an alias for the original object.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "copying_objects", "tags": ["copying", "copy module", "object identity"], "summary": "creating copies of objects using the copy module and understanding object identity vs equivalence.", "content": "the `copy` module provides a function called `copy` that can duplicate any object.\n\n```python\nfrom copy import copy\n```\n\nto see how it works, let's start with a new `time` object that represents the start time of the movie.\n\n```python\nstart = make_time(9, 20, 0)\nend = copy(start)\n```\n\nnow `start` and `end` contain the same data, but the `is` operator confirms that they are not the same object.\n\n```python\nstart is end  # returns false\n```\n\nyou might expect `==` to yield `true` because the objects contain the same data. but for programmer-defined classes, the default behavior of the `==` operator is the same as the `is` operator -- it checks identity, not equivalence.\n\n```python\nstart == end  # returns false\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "pure_functions", "tags": ["pure functions", "functional programming", "side effects"], "summary": "creating pure functions that don't modify their parameters and understanding functional programming style.", "content": "we can use `copy` to write pure functions that don't modify their parameters. for example, here's a function that takes a `time` object and a duration in hours, minutes and seconds. it makes a copy of the original object, uses `increment_time` to modify the copy, and returns it.\n\n```python\ndef add_time(time, hours, minutes, seconds):\n    total = copy(time)\n    increment_time(total, hours, minutes, seconds)\n    return total\n```\n\n`add_time` is a **pure function** because it does not modify any of the objects passed to it as arguments and its only effect is to return a value.\n\nanything that can be done with impure functions can also be done with pure functions. in fact, some programming languages only allow pure functions. programs that use pure functions might be less error-prone, but impure functions are sometimes convenient and can be more efficient.\n\nin general, i suggest you write pure functions whenever it is reasonable and resort to impure functions only if there is a compelling advantage. this approach might be called a **functional programming style**.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "prototype_and_patch_development", "tags": ["development methodology", "prototyping", "debugging"], "summary": "using prototype and patch methodology for incremental program development and debugging.", "content": "this section demonstrates a program development plan i call **prototype and patch**. we started with a simple prototype that worked correctly for the first example. then we tested it with more difficult examples -- when we found an error, we modified the program to fix it, like putting a patch on tire with a puncture.\n\nthis approach can be effective, especially if you don't yet have a deep understanding of the problem. but incremental corrections can generate code that is unnecessarily complicated -- since it deals with many special cases -- and unreliable -- since it is hard to know if you have found all the errors.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "design_first_development", "tags": ["development methodology", "planning", "abstraction"], "summary": "using design-first development with high-level insights to create more robust solutions.", "content": "an alternative plan is **design-first development**, which involves more planning before prototyping. in a design-first process, sometimes a high-level insight into the problem makes the programming much easier.\n\nin this case, the insight is that we can think of a `time` object as a three-digit number in base 60 -- also known as sexagesimal. the `second` attribute is the \"ones column\", the `minute` attribute is the \"sixties column\", and the `hour` attribute is the \"thirty-six hundreds column\". when we wrote `increment_time`, we were effectively doing addition in base 60, which is why we had to carry from one column to the next.\n\nthis observation suggests another approach to the whole problem -- we can convert `time` objects to integers and take advantage of the fact that python knows how to do integer arithmetic.\n\nironically, sometimes making a problem harder -- or more general -- makes it easier, because there are fewer special cases and fewer opportunities for error.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging_objects", "tags": ["debugging", "type checking", "attributes", "inspection"], "summary": "using built-in functions to inspect and debug objects and their attributes.", "content": "python provides several built-in functions that are useful for testing and debugging programs that work with objects.\n\n- `type(start)` - gets the type of an object\n- `isinstance(end, time)` - checks if an object is an instance of a particular class\n- `hasattr(start, 'hour')` - checks if an object has a particular attribute\n- `vars(start)` - gets all attributes and their values in a dictionary\n\nthese functions help with inspecting objects and understanding their structure during development and debugging.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "object_oriented_programming_features", "tags": ["OOP", "methods", "object-oriented language"], "summary": "characteristics of object-oriented programming languages and how they organize computation around objects.", "content": "python is an **object-oriented language** -- that is, it provides features that support object-oriented programming, which has these defining characteristics:\n\n- most of the computation is expressed in terms of operations on objects.\n\n- objects often represent things in the real world, and methods often correspond to the ways things in the real world interact.\n\n- programs include class and method definitions.\n\nfor example, in the previous chapter we defined a `time` class that corresponds to the way people record the time of day, and we defined functions that correspond to the kinds of things people do with times. but there was no explicit connection between the definition of the `time` class and the function definitions that follow. we can make the connection explicit by rewriting a function as a **method**, which is defined inside a class definition.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "defining_methods", "tags": ["methods", "self parameter", "method syntax"], "summary": "converting functions to methods by moving them inside class definitions and using the self parameter.", "content": "in the previous chapter we defined a class named `time` and wrote a function named `print_time` that displays a time of day.\n\n```python\nclass time:\n    \"\"\"represents the time of day.\"\"\"\n\ndef print_time(time):\n    s = f'{time.hour:02d}:{time.minute:02d}:{time.second:02d}'\n    print(s)\n```\n\nto make `print_time` a method, all we have to do is move the function definition inside the class definition. notice the change in indentation.\n\nat the same time, we'll change the name of the parameter from `time` to `self`. this change is not necessary, but it is conventional for the first parameter of a method to be named `self`.\n\n```python\nclass time:\n    \"\"\"represents the time of day.\"\"\"\n\n    def print_time(self):\n        s = f'{self.hour:02d}:{self.minute:02d}:{self.second:02d}'\n        print(s)\n```\n\nthere are two ways to call this method. the first (and less common) way is to use function syntax:\n\n```python\ntime.print_time(start)\n```\n\nthe second (and more idiomatic) way is to use method syntax:\n\n```python\nstart.print_time()\n```\n\nin method syntax, `start` is the object the method is invoked on, which is called the **receiver**, based on the analogy that invoking a method is like sending a message to an object.\n\nregardless of the syntax, the behavior of the method is the same. the receiver is assigned to the first parameter, so inside the method, `self` refers to the same object as `start`.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "static_methods", "tags": ["static methods", "class methods", "factory methods"], "summary": "creating static methods that don't require an instance and can be invoked on the class itself.", "content": "as another example, let's consider the `int_to_time` function. this function takes `seconds` as a parameter and returns a new `time` object. if we transform it into a method of the `time` class, we have to invoke it on a `time` object. but if we're trying to create a new `time` object, what are we supposed to invoke it on?\n\nwe can solve this chicken-and-egg problem using a **static method**, which is a method that does not require an instance of the class to be invoked.\n\n```python\ndef int_to_time(seconds):\n    minute, second = divmod(seconds, 60)\n    hour, minute = divmod(minute, 60)\n    return make_time(hour, minute, second)\n```\n\nbecause it is a static method, it does not have `self` as a parameter. to invoke it, we use `time`, which is the class object.\n\n```python\nstart = time.int_to_time(34800)\n```\n\nstatic methods are useful for creating factory methods that create new instances of a class.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "instance_methods", "tags": ["instance methods", "receiver", "method invocation"], "summary": "regular methods that require an instance as receiver and operate on that instance.", "content": "`add_time` has `self` as a parameter because it is not a static method. it is an ordinary method -- also called an **instance method**. to invoke it, we need a `time` instance.\n\n```python\nend = start.add_time(1, 32, 0)\n```\n\ninstance methods are the most common type of method and operate on the specific instance they are invoked on.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "the___str___method", "tags": ["special methods", "string representation", "object conversion"], "summary": "using the __str__ special method to define how objects are converted to strings.", "content": "when you write a method, you can choose almost any name you want. however, some names have special meanings. for example, if an object has a method named `__str__`, python uses that method to convert the object to a string.\n\n```python\ndef __str__(self):\n    s = f'{self.hour:02d}:{self.minute:02d}:{self.second:02d}'\n    return s\n```\n\nthis method is similar to `print_time`, from the previous chapter, except that it returns the string rather than printing it.\n\nyou can invoke this method in the usual way, but python can also invoke it for you. if you use the built-in function `str` to convert a `time` object to a string, python uses the `__str__` method in the `time` class.\n\n```python\nstr(end)\n```\n\nand it does the same if you print a `time` object.\n\n```python\nprint(end)\n```\n\nmethods like `__str__` are called **special methods**. you can identify them because their names begin and end with two underscores.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "the___init___method", "tags": ["initialization", "constructor", "default parameters"], "summary": "using the __init__ special method to initialize object attributes when creating new instances.", "content": "the most special of the special methods is `__init__`, so-called because it initializes the attributes of a new object. an `__init__` method for the `time` class might look like this:\n\n```python\ndef __init__(self, hour=0, minute=0, second=0):\n    self.hour = hour\n    self.minute = minute\n    self.second = second\n```\n\nnow when we instantiate a `time` object, python invokes `__init__`, and passes along the arguments. so we can create an object and initialize the attributes at the same time.\n\n```python\ntime = time(9, 40, 0)\nprint(time)\n```\n\nin this example, the parameters are optional, so if you call `time` with no arguments, you get the default values.\n\n```python\ntime = time()\nprint(time)\n```\n\nif you provide one argument, it overrides `hour`; if you provide two arguments, they override `hour` and `minute`; and if you provide three arguments, they override all three default values.\n\nwhen i write a new class, i almost always start by writing `__init__`, which makes it easier to create objects, and `__str__`, which is useful for debugging.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "operator_overloading", "tags": ["operator overloading", "special methods", "__add__"], "summary": "changing operator behavior for custom classes using special methods like __add__.", "content": "by defining other special methods, you can specify the behavior of operators on programmer-defined types. for example, if you define a method named `__add__` for the `time` class, you can use the `+` operator on time objects.\n\nhere is an `__add__` method:\n\n```python\ndef __add__(self, other):\n    seconds = self.time_to_int() + other.time_to_int()\n    return time.int_to_time(seconds)\n```\n\nwe can use it like this:\n\n```python\nduration = time(1, 32)\nend = start + duration\nprint(end)\n```\n\nthere is a lot happening when we run these three lines of code:\n\n- when we instantiate a `time` object, the `__init__` method is invoked.\n\n- when we use the `+` operator with a `time` object, its `__add__` method is invoked.\n\n- and when we print a `time` object, its `__str__` method is invoked.\n\nchanging the behavior of an operator so that it works with programmer-defined types is called **operator overloading**. for every operator, like `+`, there is a corresponding special method, like `__add__`.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging_with_invariants", "tags": ["debugging", "invariants", "assert", "validation"], "summary": "using invariants and assert statements to validate object state and detect errors.", "content": "a `time` object is valid if the values of `minute` and `second` are between `0` and `60` -- including `0` but not `60` -- and if `hour` is positive. also, `hour` and `minute` should be integer values, but we might allow `second` to have a fraction part. requirements like these are called **invariants** because they should always be true. to put it a different way, if they are not true, something has gone wrong.\n\nwriting code to check invariants can help detect errors and find their causes. for example, you might have a method like `is_valid` that takes a time object and returns `false` if it violates an invariant.\n\n```python\ndef is_valid(self):\n    if self.hour < 0 or self.minute < 0 or self.second < 0:\n        return false\n    if self.minute >= 60 or self.second >= 60:\n        return false\n    if not isinstance(self.hour, int):\n        return false\n    if not isinstance(self.minute, int):\n        return false\n    return true\n```\n\nthen, at the beginning of each method you can check the arguments to make sure they are valid.\n\n```python\ndef is_after(self, other):\n    assert self.is_valid(), 'self is not a valid time'\n    assert other.is_valid(), 'self is not a valid time'\n    return self.time_to_int() > other.time_to_int()\n```\n\nthe `assert` statement evaluates the expression that follows. if the result is `true`, it does nothing; if the result is `false`, it causes an `assertionerror`.\n\n`assert` statements are useful because they distinguish code that deals with normal conditions from code that checks for errors.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "classes_and_objects", "tags": ["object-oriented programming", "classes", "objects"], "summary": "introduction to object-oriented programming concepts including defining classes, creating objects, and using methods to create, modify, and perform computations with geometric objects.", "content": "at this point we have defined classes and created objects that represent the time of day and the day of the year. and we've defined methods that create, modify, and perform computations with these objects.\n\nin this chapter we'll continue our tour of object-oriented programming (oop) by defining classes that represent geometric objects, including points, lines, rectangles, and circles. we'll write methods that create and modify these objects, and we'll use the `jupyturtle` module to draw them.\n\ni'll use these classes to demonstrate oop topics including object identity and equivalence, shallow and deep copying, and polymorphism.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "creating_a_point", "tags": ["point", "coordinates", "class definition"], "summary": "defining a point class to represent locations in 2d space using x and y coordinates, with methods for initialization, string representation, translation, and copying.", "content": "in computer graphics a location on the screen is often represented using a pair of coordinates in an `x`-`y` plane. by convention, the point `(0, 0)` usually represents the upper-left corner of the screen, and  `(x, y)` represents the point `x` units to the right and `y` units down from the origin. compared to the cartesian coordinate system you might have seen in a math class, the `y` axis is upside-down.\n\nthere are several ways we might represent a point in python:\n\n- we can store the coordinates separately in two variables, `x` and `y`.\n- we can store the coordinates as elements in a list or tuple.\n- we can create a new type to represent points as objects.\n\nin object-oriented programming, it would be most idiomatic to create a new type.\n\n```python\nclass point:\n    \"\"\"represents a point in 2-d space.\"\"\"\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f'point({self.x}, {self.y})'\n```\n\nthe `__init__` method takes the coordinates as parameters and assigns them to attributes `x` and `y`. the `__str__` method returns a string representation of the `point`.\n\nwe can write methods like `translate` that takes two numbers, `dx` and `dy`, and adds them to the attributes `x` and `y`:\n\n```python\ndef translate(self, dx, dy):\n    self.x += dx\n    self.y += dy\n```\n\nif we don't want to modify an existing `point`, we can use `copy` to copy the original object and then modify the copy, or create a `translated` method:\n\n```python\ndef translated(self, dx=0, dy=0):\n    point = copy(self)\n    point.translate(dx, dy)\n    return point\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "creating_a_line", "tags": ["line", "segments", "drawing"], "summary": "defining a line class that represents line segments between two points, with methods for drawing lines using the jupyturtle module.", "content": "now let's define a class that represents the line segment between two points.\n\n```python\nclass line:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __str__(self):\n        return f'line({self.p1}, {self.p2})'\n```\n\nwhen we call `print` and pass `line` as a parameter, `print` invokes `__str__` on `line`. the `__str__` method uses an f-string to create a string representation of the `line`. the f-string contains two expressions in curly braces, `self.p1` and `self.p2`. when those expressions are evaluated, the results are `point` objects. then, when they are converted to strings, the `__str__` method from the `point` class gets invoked.\n\nto draw lines, we'll use two new functions from the `jupyturtle` module:\n\n* `jumpto`, which takes two coordinates and moves the `turtle` to the given location without drawing a line, and\n* `moveto`, which moves the `turtle` from its current location to the given location, and draws a line segment between them.\n\nhere's a method that draws a `line`:\n\n```python\ndef draw(self):\n    jumpto(self.p1.x, self.p1.y)\n    moveto(self.p2.x, self.p2.y)\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "equivalence_and_identity", "tags": ["equality", "identity", "comparison"], "summary": "understanding the difference between object equivalence and identity, and how to override the equality operator for custom classes.", "content": "suppose we create two points with the same coordinates:\n\n```python\np1 = point(200, 100)\np2 = point(200, 100)\n```\n\nif we use the `==` operator to compare them, we get the default behavior for programmer-defined types -- the result is `true` only if they are the same object, which they are not.\n\nif we want to change that behavior, we can provide a special method called `__eq__` that defines what it means for two `point` objects to be equal:\n\n```python\ndef __eq__(self, other):\n    return (self.x == other.x) and (self.y == other.y)\n```\n\nthis definition considers two `points` to be equal if their attributes are equal. now when we use the `==` operator, it invokes the `__eq__` method.\n\nbut the `is` operator still indicates that they are different objects. it's not possible to override the `is` operator -- it always checks whether the objects are identical. but for programmer-defined types, you can override the `==` operator so it checks whether the objects are equivalent. and you can define what equivalent means.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "creating_a_rectangle", "tags": ["rectangle", "geometric objects", "composition"], "summary": "defining a rectangle class that uses width, height, and a corner point to represent rectangles, with methods for creating points, lines, and drawing.", "content": "now let's define a class that represents and draws rectangles. to keep things simple, we'll assume that the rectangles are either vertical or horizontal, not at an angle.\n\nthere are at least two possibilities for specifying the location and size of a rectangle:\n\n- you could specify the width and height of the rectangle and the location of one corner.\n- you could specify two opposing corners.\n\nhere is the class definition using the first approach:\n\n```python\nclass rectangle:\n    \"\"\"represents a rectangle.\n\n    attributes: width, height, corner.\n    \"\"\"\n    def __init__(self, width, height, corner):\n        self.width = width\n        self.height = height\n        self.corner = corner\n\n    def __str__(self):\n        return f'rectangle({self.width}, {self.height}, {self.corner})'\n```\n\nto draw a rectangle, we can create methods to make four `point` objects to represent the corners and four `line` objects to represent the sides:\n\n```python\ndef make_points(self):\n    p1 = self.corner\n    p2 = p1.translated(self.width, 0)\n    p3 = p2.translated(0, self.height)\n    p4 = p3.translated(-self.width, 0)\n    return p1, p2, p3, p4\n\ndef make_lines(self):\n    p1, p2, p3, p4 = self.make_points()\n    return line(p1, p2), line(p2, p3), line(p3, p4), line(p4, p1)\n\ndef draw(self):\n    lines = self.make_lines()\n    for line in lines:\n        line.draw()\n```", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "changing_rectangles", "tags": ["modification", "methods", "bugs"], "summary": "methods for modifying rectangles including grow and translate, with discussion of a subtle bug related to shared objects.", "content": "now let's consider two methods that modify rectangles, `grow` and `translate`. we'll see that `grow` works as expected, but `translate` has a subtle bug.\n\n`grow` takes two numbers, `dwidth` and `dheight`, and adds them to the `width` and `height` attributes of the rectangle:\n\n```python\ndef grow(self, dwidth, dheight):\n    self.width += dwidth\n    self.height += dheight\n```\n\n`translate` takes two numbers, `dx` and `dy`, and moves the rectangle the given distances in the `x` and `y` directions:\n\n```python\ndef translate(self, dx, dy):\n    self.corner.translate(dx, dy)\n```\n\nwhen we use `copy` to duplicate a rectangle and then translate the copy, both rectangles appear to move. this happens because when we use `copy` to duplicate a rectangle, it copies the `rectangle` object but not the `point` object it contains. so the rectangles are different objects, as intended, but their `corner` attributes refer to the same object.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "deep_copy", "tags": ["copying", "shallow copy", "deep copy"], "summary": "understanding the difference between shallow and deep copying, and how to use deepcopy to create completely independent copies of nested objects.", "content": "when we use `copy` to duplicate an object, it copies the object but not the objects it contains. as a result, changing the `width` or `height` of one `rectangle` does not affect the other, but changing the attributes of the shared `point` affects both! this behavior is confusing and error-prone.\n\nwhat `copy` does is called a **shallow copy** because it copies the object but not the objects it contains.\n\nfortunately, the `copy` module provides another function, called `deepcopy`, that copies not only the object but also the objects it refers to, and the objects *they* refer to, and so on. this operation is called a **deep copy**.\n\n```python\nfrom copy import deepcopy\n\nbox4 = deepcopy(box3)\n```\n\nwith deep copy, we can confirm that the two `rectangle` objects refer to different `point` objects:\n\n```python\nbox3.corner is box4.corner  # returns false\n```\n\nbecause `box3` and `box4` are completely separate objects, we can modify one without affecting the other.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "polymorphism", "tags": ["polymorphism", "methods", "multiple types"], "summary": "the concept of polymorphism where different types can provide the same methods, allowing uniform treatment of different objects.", "content": "in the previous example, we invoked the `draw` method on two `line` objects and two `rectangle` objects. we can do the same thing more concisely by making a list of objects:\n\n```python\nshapes = [line1, line2, box3, box4]\n```\n\nthe elements of this list are different types, but they all provide a `draw` method, so we can loop through the list and invoke `draw` on each one:\n\n```python\nfor shape in shapes:\n    shape.draw()\n```\n\nthe first and second time through the loop, `shape` refers to a `line` object, so when `draw` is invoked, the method that runs is the one defined in the `line` class.\n\nthe third and fourth time through the loop, `shape` refers to a `rectangle` object, so when `draw` is invoked, the method that runs is the one defined in the `rectangle` class.\n\nin a sense, each object knows how to draw itself. this feature is called **polymorphism**. the word comes from greek roots that mean \"many shaped\". in object-oriented programming, polymorphism is the ability of different types to provide the same methods, which makes it possible to perform many computations -- like drawing shapes -- by invoking the same method on different types of objects.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging", "tags": ["debugging", "shared objects", "immutability"], "summary": "strategies for avoiding bugs related to shared objects, including using deep copy and avoiding object modification.", "content": "in this chapter, we ran into a subtle bug that happened because we created a `point` that was shared by two `rectangle` objects, and then we modified the `point`. in general, there are two ways to avoid problems like this: you can avoid sharing objects or you can avoid modifying them.\n\nto avoid sharing objects, you can use deep copy, as we did in this chapter.\n\nto avoid modifying objects, consider replacing impure functions like `translate` with pure functions like `translated`. for example, here's a version of `translated` that creates a new `point` and never modifies its attributes:\n\n```python\ndef translated(self, dx=0, dy=0):\n    x = self.x + dx\n    y = self.y + dy\n    return point(x, y)\n```\n\npython provides features that make it easier to avoid modifying objects. they are beyond the scope of this book, but if you are curious, ask a virtual assistant, \"how do i make a python object immutable?\"\n\ncreating a new object takes more time than modifying an existing one, but the difference seldom matters in practice. programs that avoid shared objects and impure functions are often easier to develop, test, and debug -- and the best kind of debugging is the kind you don't have to do.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "glossary", "tags": ["definitions", "terminology"], "summary": "key terms and definitions from the chapter on classes and objects.", "content": "**shallow copy:** a copy operation that does not copy nested objects.\n\n**deep copy:** a copy operation that also copies nested objects.\n\n**polymorphism:** the ability of a method or operator to work with multiple types of objects.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "inheritance", "tags": ["inheritance", "object-oriented programming", "classes"], "summary": "introduction to inheritance as a key feature of object-oriented programming that allows creating new classes as modified versions of existing classes.", "content": "the language feature most often associated with object-oriented programming is **inheritance**. inheritance is the ability to define a new class that is a modified version of an existing class. in this chapter i demonstrate inheritance using classes that represent playing cards, decks of cards, and poker hands.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "representing_cards", "tags": ["encoding", "class variables", "data representation"], "summary": "using integer encoding to represent playing card suits and ranks for easier comparison, with class variables to store string representations.", "content": "there are 52 playing cards in a standard deck -- each of them belongs to one of four suits and one of thirteen ranks. the suits are spades, hearts, diamonds, and clubs. the ranks are ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, jack, queen, and king.\n\nan alternative to using strings is to use integers to **encode** the ranks and suits. in this context, \"encode\" means that we are going to define a mapping between numbers and suits, or between numbers and ranks.\n\nfor example, this table shows the suits and the corresponding integer codes:\n\n| suit | code |\n| --- | --- |\n|  spades     |   3  |\n|  hearts     |   2  |\n|  diamonds   |   1  |\n|  clubs      |   0  |\n\nto encode the ranks, we'll use the integer `2` to represent the rank `2`, `3` to represent `3`, and so on up to `10`. the face cards are encoded as jack=11, queen=12, king=13, and ace can be either 1 or 14.\n\nto represent these encodings, we will use two lists of strings as **class variables**, which are variables defined inside a class definition, but not inside a method.\n\n```python\nclass card:\n    \"\"\"represents a standard playing card.\"\"\"\n\n    suit_names = ['clubs', 'diamonds', 'hearts', 'spades']\n    rank_names = [none, 'ace', '2', '3', '4', '5', '6', '7',\n                  '8', '9', '10', 'jack', 'queen', 'king', 'ace']\n```\n\nthe first element of `rank_names` is `none` because there is no card with rank zero. by including `none` as a place-keeper, we get a list with the nice property that the index `2` maps to the string `'2'`, and so on.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "card_attributes", "tags": ["attributes", "initialization", "instance variables"], "summary": "defining card class with suit and rank attributes and initialization method.", "content": "here's an `__init__` method for the `card` class -- it takes `suit` and `rank` as parameters and assigns them to attributes with the same names.\n\n```python\ndef __init__(self, suit, rank):\n    self.suit = suit\n    self.rank = rank\n```\n\nclass variables are associated with the class, rather than an instance of the class, so we can access them using the class name like `card.suit_names`. it is also legal to use the instance to access the class variables, but using the class makes it clearer that they are class variables, not attributes.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "printing_cards", "tags": ["string representation", "__str__", "formatting"], "summary": "creating a human-readable string representation of card objects using the __str__ method.", "content": "here's a `__str__` method for `card` objects:\n\n```python\ndef __str__(self):\n    rank_name = card.rank_names[self.rank]\n    suit_name = card.suit_names[self.suit]\n    return f'{rank_name} of {suit_name}'\n```\n\nwhen we print a `card`, python calls the `__str__` method to get a human-readable representation of the card.\n\nevery `card` instance has its own `suit` and `rank` attributes, but there is only one `card` class object, and only one copy of the class variables `suit_names` and `rank_names`.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "comparing_cards", "tags": ["comparison", "equality", "ordering", "special methods"], "summary": "implementing comparison operations for card objects using special methods like __eq__, __lt__, and __le__.", "content": "if we use the `==` operator to compare two card objects with the same suit and rank, it checks whether they refer to the same object by default. we can change this behavior by defining the special method `__eq__`:\n\n```python\ndef __eq__(self, other):\n    return self.suit == other.suit and self.rank == other.rank\n```\n\n`__eq__` takes two `card` objects as parameters and returns `true` if they have the same suit and rank, even if they are not the same object. in other words, it checks whether they are equivalent, even if they are not identical.\n\nif we use the `!=` operator, python invokes a special method called `__ne__`, if it exists. otherwise it invokes `__eq__` and inverts the result.\n\nto change the behavior of the `<` operator, we can define a special method called `__lt__`. for the sake of this example, let's assume that suit is more important than rank -- so all spades outrank all hearts, which outrank all diamonds, and so on. if two cards have the same suit, the one with the higher rank wins.\n\nwe can implement this logic using a helper method:\n\n```python\ndef to_tuple(self):\n    return (self.suit, self.rank)\n\ndef __lt__(self, other):\n    return self.to_tuple() < other.to_tuple()\n```\n\ntuple comparison compares the first elements from each tuple, which represent the suits. if they are the same, it compares the second elements, which represent the ranks.\n\nif we use the `>` operator, it invokes a special method called `__gt__`, if it exists. otherwise it invokes `__lt__` with the arguments in the opposite order.\n\nfor the `<=` operator, we can define `__le__`:\n\n```python\ndef __le__(self, other):\n    return self.to_tuple() <= other.to_tuple()\n```\n\nif we use the `>=` operator, it uses `__ge__` if it exists. otherwise, it invokes `__le__` with the arguments in the opposite order.\n\nas we have defined them, these methods are complete in the sense that we can compare any two `card` objects, and consistent in the sense that results from different operators don't contradict each other. with these two properties, we can say that `card` objects are **totally ordered**. and that means they can be sorted.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "decks", "tags": ["collections", "composition", "static methods"], "summary": "creating a deck class that contains a collection of card objects with methods for card manipulation.", "content": "now that we have objects that represent cards, let's define objects that represent decks. the following is a class definition for `deck` with an `__init__` method that takes a list of `card` objects as a parameter and assigns it to an attribute called `cards`.\n\n```python\nclass deck:\n    def __init__(self, cards):\n        self.cards = cards\n```\n\nto create a list that contains the 52 cards in a standard deck, we'll use the following static method:\n\n```python\ndef make_cards():\n    cards = []\n    for suit in range(4):\n        for rank in range(2, 15):\n            card = card(suit, rank)\n            cards.append(card)\n    return cards\n```\n\nin `make_cards`, the outer loop enumerates the suits from `0` to `3`. the inner loop enumerates the ranks from `2` to `14` -- where `14` represents an ace that outranks a king.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "printing_the_deck", "tags": ["string representation", "efficiency", "join"], "summary": "creating an efficient string representation for deck objects using join for better performance.", "content": "here is a `__str__` method for `deck`:\n\n```python\ndef __str__(self):\n    res = []\n    for card in self.cards:\n        res.append(str(card))\n    return '\\n'.join(res)\n```\n\nthis method demonstrates an efficient way to accumulate a large string -- building a list of strings and then using the string method `join`.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "add,_remove,_shuffle_and_sort", "tags": ["methods", "delegation", "list operations"], "summary": "implementing deck operations including taking cards, putting cards back, shuffling, and sorting.", "content": "to deal cards, we would like a method that removes a card from the deck and returns it. the list method `pop` provides a convenient way to do that:\n\n```python\ndef take_card(self):\n    return self.cards.pop()\n```\n\nto add a card, we can use the list method `append`:\n\n```python\ndef put_card(self, card):\n    self.cards.append(card)\n```\n\nto shuffle the deck, we can use the `shuffle` function from the `random` module:\n\n```python\ndef shuffle(self):\n    random.shuffle(self.cards)\n```\n\nto sort the cards, we can use the list method `sort`, which sorts the elements \"in place\":\n\n```python\ndef sort(self):\n    self.cards.sort()\n```\n\nwhen we invoke `sort`, it uses the `__lt__` method to compare cards. in this example, `deck.sort` doesn't do anything other than invoke `list.sort`. passing along responsibility like this is called **delegation**.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "parents_and_children", "tags": ["inheritance", "parent class", "child class", "Liskov substitution"], "summary": "understanding parent-child class relationships in inheritance and the liskov substitution principle.", "content": "inheritance is the ability to define a new class that is a modified version of an existing class. as an example, let's say we want a class to represent a \"hand\", that is, the cards held by one player.\n\n* a hand is similar to a deck -- both are made up of a collection of cards, and both require operations like adding and removing cards.\n* a hand is also different from a deck -- there are operations we want for hands that don't make sense for a deck.\n\nthis relationship between classes -- where one is a specialized version of another -- lends itself to inheritance.\n\nto define a new class that is based on an existing class, we put the name of the existing class in parentheses:\n\n```python\nclass hand(deck):\n    \"\"\"represents a hand of playing cards.\"\"\"\n```\n\nthis definition indicates that `hand` inherits from `deck`, which means that `hand` objects can access methods defined in `deck`, like `take_card` and `put_card`.\n\n`hand` also inherits `__init__` from `deck`, but if we define `__init__` in the `hand` class, it overrides the one in the `deck` class.\n\nwhen a new class inherits from an existing one, the existing one is called the **parent** and the new class is called the **child**. in general:\n\n* instances of the child class should have all of the attributes of the parent class, but they can have additional attributes.\n* the child class should have all of the methods of the parent class, but it can have additional methods.\n* if a child class overrides a method from the parent class, the new method should take the same parameters and return a compatible result.\n\nthis set of rules is called the \"liskov substitution principle\" after computer scientist barbara liskov.\n\nif you follow these rules, any function or method designed to work with an instance of a parent class, like a `deck`, will also work with instances of a child class, like `hand`.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "specialization", "tags": ["specialization", "bridge", "game-specific logic"], "summary": "using inheritance for specialization by creating game-specific classes with additional functionality.", "content": "let's make a class called `bridgehand` that represents a hand in bridge -- a widely played card game. we'll inherit from `hand` and add a new method called `high_card_point_count` that evaluates a hand using a \"high card point\" method, which adds up points for the high cards in the hand.\n\nhere's a class definition that contains as a class variable a dictionary that maps from card names to their point values:\n\n```python\nclass bridgehand(hand):\n    \"\"\"represents a bridge hand.\"\"\"\n\n    hcp_dict = {\n        'ace': 4,\n        'king': 3,\n        'queen': 2,\n        'jack': 1,\n    }\n```\n\ngiven the rank of a card, like `12`, we can use `card.rank_names` to get the string representation of the rank, and then use `hcp_dict` to get its score.\n\n`bridgehand` inherits the variables and methods of `hand` and adds a class variable and a method that are specific to bridge. this way of using inheritance is called **specialization** because it defines a new class that is specialized for a particular use, like playing bridge.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "debugging", "tags": ["debugging", "method resolution", "inheritance challenges"], "summary": "debugging techniques for inheritance and understanding method resolution order.", "content": "inheritance is a useful feature. some programs that would be repetitive without inheritance can be written more concisely with it. also, inheritance can facilitate code reuse, since you can customize the behavior of a parent class without having to modify it. in some cases, the inheritance structure reflects the natural structure of the problem, which makes the design easier to understand.\n\non the other hand, inheritance can make programs difficult to read. when a method is invoked, it is sometimes not clear where to find its definition -- the relevant code may be spread across several modules.\n\nany time you are unsure about the flow of execution through your program, the simplest solution is to add print statements at the beginning of the relevant methods.\n\nas an alternative, you could use the following function, which takes an object and a method name (as a string) and returns the class that provides the definition of the method:\n\n```python\ndef find_defining_class(obj, method_name):\n    \"\"\"find the class where the given method is defined.\"\"\"\n    for typ in type(obj).mro():\n        if method_name in vars(typ):\n            return typ\n    return f'method {method_name} not found.'\n```\n\n`find_defining_class` uses the `mro` method to get the list of class objects (types) that will be searched for methods. \"mro\" stands for \"method resolution order\", which is the sequence of classes python searches to \"resolve\" a method name -- that is, to find the function object the name refers to.", "source": "https://allendowney.github.io/ThinkPython/"}, {"name": "glossary", "tags": ["definitions", "terminology"], "summary": "key terms and definitions from the chapter on inheritance.", "content": "**inheritance:** the ability to define a new class that is a modified version of a previously defined class.\n\n**encode:** to represent one set of values using another set of values by constructing a mapping between them.\n\n**class variable:** a variable defined inside a class definition, but not inside any method.\n\n**totally ordered:** a set of objects is totally ordered if we can compare any two elements and the results are consistent.\n\n**delegation:** when one method passes responsibility to another method to do most or all of the work.\n\n**parent class:** a class that is inherited from.\n\n**child class:** a class that inherits from another class.\n\n**specialization:** a way of using inheritance to create a new class that is a specialized version of an existing class.", "source": "https://allendowney.github.io/ThinkPython/"}]